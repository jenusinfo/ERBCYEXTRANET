@model Eurobank.Models.Application.ApplicationViewModel
@using Eurobank.Helpers.Validation;
<style type="text/css">
    .k-grid-header .k-header > .k-link {
        margin: -0.75rem 0.0rem;
        text-overflow: initial;
    }

        .k-grid-header .k-header > .k-link > .k-icon.k-i-sort-desc-sm, .k-grid-header .k-header > .k-link > .k-icon.k-i-sort-asc-sm {
            vertical-align: text-bottom;
            margin-left: 0px;
        }

    .k-grid th, .k-grid td {
        padding: 0.75rem 0.50rem;
        text-align: center;
    }
</style>
@*@{
        List<ValidationResultModel> validationResults = null;
        string sectionValidationClass = "";
        if (ViewBag.ErrorSummaryMsgs != null)
        {
            validationResults = ViewBag.ErrorSummaryMsgs;
            if (validationResults.Any(j => !j.IsValid))
            {
                validationResults = validationResults.Where(j => !j.IsValid).ToList();
            }

            if (validationResults != null && validationResults.Count > 0)
            {
                if (validationResults.Any(x => x.ApplicationModuleName == ApplicationModule.ACCOUNTS))
                {
                    sectionValidationClass = "bg-danger-row";
                }
                else
                {
                    sectionValidationClass = "bg-success-row";
                }
            }
            else
            {
                sectionValidationClass = "bg-success-row";
            }
        }
    }*@

<div class="shadow-box col-md-12">
    <div class="col-md-12">
        <ul id="accordionAccountsDetails">
            <li id="chartSection" class="k-state-active">
                <span class="k-link sectionValidationClass" id="Span1" style="width:auto; height:auto;">
                    @ResHelper.GetString("Eurobank.Accounts")
                </span>
                <div id="accordionAccountsDetailsContentOne">

                    @(Html.Kendo().Grid<Eurobank.Models.Applications.Accounts.AccountsDetailsViewModel>
		()
		.Name("AccountsDetails")

		.Columns(columns =>
		{
							columns.Template
							(
							@"<div id='target'><i class='fa fa-ellipsis-v' style='font-size:25px'></i></div>"
							).Width(30);
			//columns.Bound(p => p.rowID).Title("ID").Width(70);
							columns.Bound(p => p.Accounts_AccountTypeName).HtmlAttributes(new { style = "text-align: left;" }).HeaderHtmlAttributes(new { style = "text-align:left;" }).Width(200);
							columns.Bound(p => p.Accounts_CurrencyName).HtmlAttributes(new { style = "text-align: left;" }).HeaderHtmlAttributes(new { style = "text-align:left;" }).Width(250);
			//columns.Bound(p => p.Accounts_StatementFrequencyName).HtmlAttributes(new { style = "text-align: left;" }).HeaderHtmlAttributes(new { style = "text-align:left;" }).Media("(min-width: 768px)");
			columns.Bound(p => p.Account_Status_Name).Title(ResHelper.GetString("Eurobank.Application.General.GridHeader.RecordStatus")).Width(100);
			//columns.Template("#=resColTemplate(data)#").Title("Items").Media("(max-width: 450px)");

		})
		 .Events(e =>
		 {
			 e.Edit("addConfirmButton_Accounts");
			 e.DataBound("onAccountDataBound");
			 e.Cancel("onGridCancel");
		 })
		.ToolBar(toolbar => { if(Model.ApplicationDetails.IsEdit) { toolbar.Create().Text("New").IconClass("justify-content-end").HtmlAttributes(new { style = "margin-left: auto;" }); } })
		.Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("AddEditAccounts").DisplayDeleteConfirmation(false).Window(w=>w.Title("Accounts").Width(800))).EnableCustomBinding(true)
		.Pageable()
		.Sortable()
		.Scrollable()
		.HtmlAttributes(new { style = "max-height:550px;" })
		.DataSource(dataSource => dataSource
		.Ajax()
		.PageSize(10)
		 .Sort(x => x.Add("Account_Status_Name").Descending())
		.Events(events => events.Error("error_handler"))
		//.Events(e => e.RequestStart("hideIdField"))
		.Model(model =>
		{

			model.Id(p => p.AccountsID);
			model.Field(p => p.Accounts_AccountType);
			model.Field(p => p.Accounts_Currency);
			model.Field(p => p.Accounts_StatementFrequency);
		})
		 //.Model(model => model.Id(p => p.AddressGuid))
		 .Events(events => events.Error("error_handlerApplicationDetails"))
		.ServerOperation(true)
		.Create(update => update.Action("AccountsPopup_Create", "Applications",new { id=Model.Id}))
		.Read(read => read.Action("Accounts_Read", "Applications", new { id = Model.Id }))
		.Update(update => update.Action("AccountsPopup_Update", "Applications", new { id = Model.Id }))
		.Destroy(update => update.Action("AccountsPopup_Destroy", "Applications"))
		//.Events(events => events.RequestEnd("onRequestEnd"))
		)
		)

                </div>
            </li>
        </ul>
    </div>
</div>

@(Html.Kendo().Window()
        .Name("AccountEditDeleteConfirmation")
        .Title("Accounts")
        .Content(@<text>
            <div>Are you sure you want to modify this record, it is being used in Cards section?</div>
            <div class="col-12 text-right">
                <button name="btnAccountYes" value="YES" type="button" class="btn btn-primary" id="AccountEditYes">Yes</button>
                <button name="btnAccountNo" value="NO" type="button" class="btn btn-primary" id="AccountEditNo">No</button>
            </div>
        </text>)
        //.Resizable()
        .Visible(false)
        .Width(900)
        .Height(900)
        .Actions(actions => actions.Close())

        )


@Html.Hidden("hdnApplication_LeftMenu_AccountDetails", @ResHelper.GetString("Eurobank.Application.LeftMenu.Accounts"))
@Html.Hidden("GridRow")
@Html.Hidden("DebitCardStatusUpdateUrl", Url.Action("DebitCardStatusChange", "Applications"))
@Html.Hidden("AccountUsedInCardUrl", Url.Action("IsAccountUseInCard", "Applications"))
@Html.Hidden("EntityTypeCode", Model.EntityTypeCode)
@Html.HiddenFor(m => m.ApplicationDetails.IsEdit, new { id = "ApplicationIsEdit" })
<input type="hidden" id="UsedCurrency">
<ul id="context-menu">

    @if (Model.ApplicationDetails.IsEdit)
    {
        <li id="editRowAccounts">Edit/View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-pencil"></span></li>
        <li id="removeRow" class="">Delete&nbsp;&nbsp;&nbsp;&nbsp;<span class="">X</span></li>
    }
    else
    {
        <li id="editRowAccounts">View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-preview"></span></li>
    }
</ul>
<script src="~/Scripts/Custom/Application/AccountDetails.js"></script>



