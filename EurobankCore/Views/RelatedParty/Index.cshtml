@using CMS.DataEngine
@using CMS.SiteProvider
@using Eurobank.Helpers.Process;
@using Microsoft.AspNetCore.Mvc;
@using Eurobank.Models.Application.Common;
@using Eurobank.Helpers.Validation;
@model Eurobank.Models.Application.RelatedParty.RelatedPartyModel
@using Kendo.Mvc.UI
@{
    ViewBag.Title = Model.ApplicationNumber + " - Related Party";
    Layout = "~/Views/Shared/_Layout_Applications.cshtml";
    bool isLegalEntity = string.Equals(Model.Type, "LEGAL ENTITY", StringComparison.OrdinalIgnoreCase);
    var userModel = UserProcess.GetUser(User.Identity.Name);
    bool isIntroducer = userModel != null && string.Equals(userModel.UserType, ApplicationUserType.INTRODUCER.ToString(), StringComparison.OrdinalIgnoreCase);

    List<ValidationResultModel> validationResults = null;
    if (ViewBag.ErrorSummaryMsgs != null)
    {
        validationResults = ViewBag.ErrorSummaryMsgs;
        if (validationResults.Any(j => !j.IsValid))
        {
            validationResults = validationResults.Where(j => !j.IsValid).ToList();
        }
    }
    bool HIDInviteFlag = SettingsKeyInfoProvider.GetBoolValue(SiteContext.CurrentSiteName + ".HIDInviteFlag");

    string legalApplicantName = string.Empty;
    if (Model.CompanyDetails != null && (!string.IsNullOrEmpty(Model.CompanyDetails.RegisteredName)))
    {
        legalApplicantName = (!string.IsNullOrEmpty(Model.CompanyDetails.RegisteredName) ? Model.CompanyDetails.RegisteredName : string.Empty);
    }

    string applicantName = string.Empty;
    if (Model.PersonalDetails != null && (!string.IsNullOrEmpty(Model.PersonalDetails.FirstName) || !string.IsNullOrEmpty(Model.PersonalDetails.LastName)))
    {
        applicantName = (!string.IsNullOrEmpty(Model.PersonalDetails.FirstName) ? Model.PersonalDetails.FirstName : string.Empty) + " " + (!string.IsNullOrEmpty(Model.PersonalDetails.LastName) ? Model.PersonalDetails.LastName : string.Empty);
    }
}

<style type="text/css">
    input {
        text-transform: uppercase;
    }

    @@media (min-width: 1028px) {
        .custom-pt {
            padding-top: 150px; /* Adjust the value as needed */
        }
    }
</style>
<span id="loader"></span>
<form id="relatedPartyForm" asp-action="RelatedParty" asp-controller="RelatedParty">
    <div class="custom-pt"></div>
    @Html.HiddenFor(model => model.ApplicationNumber)
    @Html.HiddenFor(model => model.ApplicationID)
    @Html.HiddenFor(model => model.Application_NodeGUID)
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.Type)
    @Html.HiddenFor(m => m.ApplicationType)
    @Html.HiddenFor(m => m.ApplicationTypeName)
    @Html.HiddenFor(m => m.IsRelatedPartyUBO)

    @if (validationResults != null && validationResults.Count > 0)
    {
        <div id="errorList" class="toast-popup p-3" aria-live="polite" aria-atomic="true">

            @foreach (ValidationResultModel err in validationResults)
            {
                <div class="toast alert alert-danger" role="alert" aria-live="assertive" aria-atomic="true" data-autohide="false">
                    <div class="toastheader">
                        <strong class="mr-auto">@err.ApplicationModuleName.ToString().Replace("_", " ") </strong>
                        <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close" onclick="toastCloseClick()">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    @foreach (ValidationError et in err.Errors)
                    {
                        <div class="toastbody"> @et.ErrorMessage</div>
                    }

                </div>
            }
            <div style="text-align:end;">
                <button type="button" class=" btn btn-sm btn-dark" onclick="showHideApplicantErroList();">Close</button>
                <button type="button" class=" btn btn-sm btn-dark" onclick="clearApplicantErroList();" data-toggle="tooltip" data-placement="top" title="Close all error messages">CLEAR ALL</button> @*<span class="fa fa-times"></span>*@
            </div>

        </div>
    }

    @if (Model.PersonalDetails != null && !isLegalEntity)
    {
        @*List<ValidationResultModel> validationResults_PersonalDetails = null;
        string sectionValidationClass_PersonalDetails = "";
        if (ViewBag.ErrorSummaryMsgs != null)
        {
            validationResults_PersonalDetails = ViewBag.ErrorSummaryMsgs;
            if (validationResults_PersonalDetails.Any(j => !j.IsValid))
            {
                validationResults_PersonalDetails = validationResults_PersonalDetails.Where(j => !j.IsValid).ToList();
            }

            if (validationResults_PersonalDetails != null && validationResults_PersonalDetails.Count > 0)
            {
                if (validationResults_PersonalDetails.Any(x => x.ApplicationModuleName == ApplicationModule.PERSONAL_DETAILS))
                {
                    sectionValidationClass_PersonalDetails = "bg-danger-row";
                }
                else
                {
                    sectionValidationClass_PersonalDetails = "bg-success-row";
                }
            }
            else
            {
                sectionValidationClass_PersonalDetails = "bg-success-row";
            }
        }*@
        <div class="shadow-box col-md-12" id="stPersonalDetails">
            <div class="col-md-12">
                <ul id="accordionPersonalDetails">
                    <li id="chartSection" class="k-state-active">
                        <span class="k-link sectionValidationClass_PersonalDetails" id="Span1" style="width:auto; height:auto;">
                            @ResHelper.GetString("Eurobank.Application.RelatedParty.PersonalDetails")
                        </span>
                        <div id="PersonalDetailsaccordionContentOne" class="row m-0">
                            @if (isIntroducer)
                            {
                                <div class="form-group">
                                    <input type="button" id="btnPersonSearch" onclick="personSearchGrid();" value="@ResHelper.GetString("Eurobank.Application.Applicant.Button.Search")" class="btn btn-primary mt-3">
                                    <input type="button" id="btnPersonClear" onclick="clearContact();" value="@ResHelper.GetString("Eurobank.Application.Applicant.Button.Clear")" class="btn btn-primary mt-3">
                                </div>
                            }
                            <div id="divRegisteredPerson">

                                @(Html.Kendo().Window()
                                    .Name("PersonSearchWindow")
                                    .Title(ResHelper.GetString("Eurobank.Application.Applicant.PersonalDetails.Search.Header"))
                                    .Content(@<text>
                                        @(Html.Kendo().Grid<Eurobank.Models.Application.Common.PersonsRegistrySearchModel>
                                                        ()
                                                        .Name("RegPersons")
                                                        .Columns(columns =>
                                                        {
                                                //columns.Select().Width(50);
                                                columns.Bound(p => p.ApplicationTypeName).Title("Type").Width(120);
                                                columns.Bound(p => p.FullName).Title("Full Name").Width(200);
                                                columns.Bound(p => p.IdentificationNumber).Width(250);
                                                columns.Bound(p => p.DateofBirth).Width(160).Title("Date Of Birth");
                                                columns.Bound(p => p.IssueDate).Width(160);
                                                columns.Bound(p => p.CitizenshipName).Width(200).Title("Citizenship");
                                                            //if (isLegalEntity == true)
                                                            //{
                                                            //    columns.Bound(p => p.PhoneNo);
                                                            //    columns.Bound(p => p.FaxNo);
                                                            //}
                                            })
                                                        @*.ToolBar(toolbar =>
                                toolbar.ClientTemplate("<div class='toolbar search-address'>" +
                                "<input type='text' name='toolApplicationType' placeholder='Type' class ='k-textbox' id='toolApplicationType'/>" +
                                "<input type='text' name='toolReferenceNumber' placeholder='Reference' class ='k-textbox' id='toolReferenceNumber'/>" +
                                "<input type='text' name='toolFullName' placeholder='Full Name' class ='k-textbox' id='toolFullName'/>" +
                                "<input type='text' name='toolIdentificationNumber' placeholder='Identification Number' class ='k-textbox' id='toolIdentificationNumber'/>" +
                                "<input type='text' name='toolDateofBirth' placeholder='Date of Birth' class ='k-textbox' id='toolDateofBirth'/>" +
                                "<input type='text' name='toolIssueDate' placeholder='Issue Date' class ='k-textbox' id='toolIssueDate'/>" +
                                "<input type='text' name='toolCitizenshipName' placeholder='Citizenship' class ='k-textbox' id='toolCitizenshipName'/>" +
                                "<button class='k-button' onclick='searchPersons()'>Search</button></div>"))*@
                                                        .ToolBar(toolbar =>
                                                        toolbar.ClientTemplate("<div class='toolbar'> " +
                                                        "<div class='row'><div class='col-md-12'><div class='input-group'>" +
                                                        "<input type='text' name='toolApplicationType' placeholder='Type' class ='k-textbox' id='toolApplicationType'/>" +
                                                        "</div></div></div></div>" +
                                                        "<div class='toolbar'>" +
                                                        "<div class='row'><div class='col-md-12'><div class='input-group'>" +
                                                        "<input type='text' name='toolFullName' placeholder='Full Name' class ='k-textbox' id='toolFullName'/>" +
                                                        "</div></div></div></div>" +
                                                        "<div class='toolbar'>" +
                                                        "<div class='row'><div class='col-md-12'><div class='input-group'>" +
                                                        "<input type='text' name='toolIdentificationNumber' placeholder='Identification Number' class ='k-textbox' id='toolIdentificationNumber'/>" +
                                                        "</div></div></div></div>" +
                                                        "<div class='toolbar'>" +
                                                        "<div class='row'><div class='col-md-12'><div class='input-group'>" +
                                                        "<input type='text' name='toolDateofBirth' placeholder='Date of Birth' class ='k-textbox' id='toolDateofBirth'/>" +
                                                        "</div></div></div></div>" +
                                                        "<div class='toolbar'>" +
                                                        "<div class='row'><div class='col-md-12'><div class='input-group'>" +
                                                        "<input type='text' name='toolIssueDate' placeholder='Issue Date' class ='k-textbox' id='toolIssueDate'/>" +
                                                        "</div></div></div></div>" +
                                                        "<div class='toolbar'>" +
                                                        "<div class='row'><div class='col-md-12'><div class='input-group'>" +
                                                        "<input type='text' name='toolCitizenshipName' placeholder='Citizenship' class ='k-textbox' id='toolCitizenshipName'/>" +
                                                        "</div></div></div></div>" +
                                                        "<div class='toolbar'>" +
                                                        "<div class='row'><div class='col-md-12'><div class='input-group'>" +
                                                        "<button class='k-button' onclick='searchPersons()'>Search</button>" +
                                                        "</div></div></div></div>"))
                                                        .Pageable()
                                                        .Selectable(x => x.Mode(GridSelectionMode.Single))
                                                        .Sortable()
                                                        .Scrollable()
                                                        .HtmlAttributes(new { style = "height:550px;" })
                                                        .DataSource(dataSource => dataSource
                                                        .Ajax()
                                                        .PageSize(10)
                                                        .Model(model =>
                                                        {

                                                            //model.Id(p => p.Id);
                                                model.Field(p => p.ApplicationTypeName);
                                                model.Field(p => p.FirstName);
                                                model.Field(p => p.LastName);
                                                model.Field(p => p.IdentificationNumber);
                                                model.Field(p => p.DateofBirth);
                                                model.Field(p => p.IssueDate);
                                                model.Field(p => p.CitizenshipName);
                                                model.Field(p => p.HomeTelNoCountryCode);
                                                model.Field(p => p.HomeTelNoNumber);
                                                model.Field(p => p.MobileTelNoCountryCode);
                                                model.Field(p => p.MobileTelNoNumber);
                                                model.Field(p => p.WorkTelNoCountryCode);
                                                model.Field(p => p.WorkTelNoNumber);
                                                model.Field(p => p.FaxNoCountryCode);
                                                model.Field(p => p.FaxNoFaxNumber);
                                                model.Field(p => p.EmailAddress);
                                                model.Field(p => p.PreferredCommunicationLanguage);
                                                model.Field(p => p.ConsentforMarketingPurposes);
                                                            //model.Field(p => p.Status);
                                            })
                                                        .ServerOperation(true)
                                                        //.Read(read => read.Action("RegisteredAddresses_Read", "Registries"))
                                                        .Read(read => read.Action("PersonRegistry_Read", "Registries"))
                                                        ))

                                            <div class="form-group d-flex justify-content-end">
                                                <input type="button" id="btnPersonCancel" onclick="personCancelGrid()" value="@ResHelper.GetString("Eurobank.Application.Applicant.Button.Address.Cancel")" class="btn btn-primary mt-3 mr-3 k-grid-cancel">
                                                <input type="button" id="btnPersonSelect" onclick="selectPersonFromGrid()" value="@ResHelper.GetString("Eurobank.Application.Applicant.Button.Address.Select")" class="btn btn-primary mt-3">
                                            </div>
                                        </text>)
                                    .Resizable()
                                    .Visible(false)
                                    .Width(600)
                                    .Actions(actions => actions.Close())
                                    //.Events(ev => ev.Close("onSearchWindowClose"))
                                    )




                            </div>


                            @Html.HiddenFor(model => model.PersonalDetails.Id)
                            @Html.HiddenFor(model => model.PersonalDetails.PersonRegistryId)
                            @Html.HiddenFor(model => model.PersonalDetails.IsRelatedPartyUBO, new { @id = "IndividualIsRelatedPartyUBO" })
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label asp-for="PersonalDetails.Title" class="control-label">@ResHelper.GetString("Eurobank.Application.RelatedParty.PersonalDetails.Label.Title")</label>
                                    @(Html.Kendo().DropDownListFor(m => m.PersonalDetails.Title).BindTo((System.Collections.IEnumerable)ViewBag.PersonTitle)
                                        .OptionLabel(new { Text = ResHelper.GetString("Eurobank.General.DropDownList.Select"), Value = "" })
                                        .DataValueField("Value")
                                        .DataTextField("Text").HtmlAttributes(new { @class = "form-control", onchange = "validatePersonalDetails()" }))
                                    <span class="text-danger">@Html.ValidationMessageFor(X => X.PersonalDetails.Title)</span>

                                </div>
                                <div class="form-group">
                                    <label asp-for="PersonalDetails.FirstName" class="control-label">@ResHelper.GetString("Eurobank.Application.RelatedParty.PersonalDetails.Label.FirstName")</label>
                                    @Html.Kendo().TextBoxFor(model => model.PersonalDetails.FirstName).HtmlAttributes(new { @class = "form-control", onfocusout = "validatePersonalDetails()", @onkeypress = "return alphaOnly(event);", @maxlength = "50" })
                                    <span class="text-danger">@Html.ValidationMessageFor(X => X.PersonalDetails.FirstName)</span>
                                    <span id="PersonalDetailsFirstNameErrorrReq" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="PersonalDetails.LastName" class="control-label">@ResHelper.GetString("Eurobank.Application.RelatedParty.PersonalDetails.Label.LastName")</label>
                                    @Html.Kendo().TextBoxFor(model => model.PersonalDetails.LastName).HtmlAttributes(new { @class = "form-control", onfocusout = "validatePersonalDetails()", @onkeypress = "return alphaOnly(event);", @maxlength = "50" })

                                    <span class="text-danger">@Html.ValidationMessageFor(X => X.PersonalDetails.LastName)</span>
                                    <span id="PersonalDetailsLastNameErrorrReq" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="PersonalDetails.FathersName" class="control-label">@ResHelper.GetString("Eurobank.Application.RelatedParty.PersonalDetails.Label.FathersName")</label>
                                    @Html.Kendo().TextBoxFor(model => model.PersonalDetails.FathersName).HtmlAttributes(new { @class = "form-control", onfocusout = "validatePersonalDetails()", @onkeypress = "return alphaOnly(event);", @maxlength = "50" })
                                    <span class="text-danger">@Html.ValidationMessageFor(X => X.PersonalDetails.FathersName)</span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="PersonalDetails.Gender" class="control-label">@ResHelper.GetString("Eurobank.Application.RelatedParty.PersonalDetails.Label.Gender")</label>
                                    @(Html.Kendo().DropDownListFor(m => m.PersonalDetails.Gender).BindTo((System.Collections.IEnumerable)ViewBag.Gender)
                                        .OptionLabel(new { Text = ResHelper.GetString("Eurobank.General.DropDownList.Select"), Value = "" })
                                        .DataValueField("Value")
                                        .DataTextField("Text").HtmlAttributes(new { @class = "form-control", onchange = "validatePersonalDetails()" }))

                                    <span class="text-danger">@Html.ValidationMessageFor(X => X.PersonalDetails.Gender)</span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="PersonalDetails.DateOfBirth" class="control-label">@ResHelper.GetString("Eurobank.Application.RelatedParty.PersonalDetails.Label.DateOfBirth")</label>
                                    @Html.Kendo().DatePickerFor(model => model.PersonalDetails.DateOfBirth).Events(e =>
                                {
                                e.Change("onChangePersonalDetailsDOB");
                                }).Format("dd/MM/yyyy").HtmlAttributes(new { @class = "form-control" })
                                    @Html.HiddenFor(model => model.PersonalDetails.HdnDateOfBirth)

                                    <span class="text-danger">@Html.ValidationMessageFor(X => X.PersonalDetails.DateOfBirth)</span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="PersonalDetails.PlaceOfBirth" class="control-label">@ResHelper.GetString("Eurobank.Application.RelatedParty.PersonalDetails.Label.PlaceOfBirth")</label>
                                    @Html.Kendo().TextBoxFor(model => model.PersonalDetails.PlaceOfBirth).HtmlAttributes(new { @class = "form-control", onfocusout = "validatePersonalDetails()", @onkeyup = "return limitlength(this,25,'PersonalDetailsPlaceOfBirthError')", @onKeyDown = "return limitlength(this,25,'PersonalDetailsPlaceOfBirthError')" })

                                    <span class="text-danger">@Html.ValidationMessageFor(X => X.PersonalDetails.PlaceOfBirth)</span>
                                    <span id="PersonalDetailsPlaceOfBirthError" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="PersonalDetails.CountryOfBirth" class="control-label">@ResHelper.GetString("Eurobank.Application.RelatedParty.PersonalDetails.Label.CountryOfBirth")</label>
                                    @(Html.Kendo().DropDownListFor(m => m.PersonalDetails.CountryOfBirth).BindTo((System.Collections.IEnumerable)ViewBag.Country)
                                        .OptionLabel(new { Text = ResHelper.GetString("Eurobank.General.DropDownList.Select"), Value = "" })
                                        .DataValueField("Value")
                                        .DataTextField("Text")
                                        .Filter("startswith")
                                        .HtmlAttributes(new { @class = "form-control", onchange = "validatePersonalDetails()" }))

                                    <span class="text-danger">@Html.ValidationMessageFor(X => X.PersonalDetails.CountryOfBirth)</span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="PersonalDetails.EducationLevel" class="control-label">@ResHelper.GetString("Eurobank.Application.RelatedParty.PersonalDetails.EducationLevel")</label>
                                    @(Html.Kendo().DropDownListFor(m => m.PersonalDetails.EducationLevel).BindTo((System.Collections.IEnumerable)ViewBag.Education)
                                        .OptionLabel(new { Text = ResHelper.GetString("Eurobank.General.DropDownList.Select"), Value = "" })
                                        .DataValueField("Value")
                                        .DataTextField("Text").HtmlAttributes(new { @class = "form-control", onchange = "validatePersonalDetails()" }))

                                    <span class="text-danger">@Html.ValidationMessageFor(X => X.PersonalDetails.EducationLevel)</span>
                                </div>
                                @if (HIDInviteFlag)
                                {
                                    <div class="pt-3">
                                        <div class="form-group">
                                            <div class="row">
                                                <div class="col-6">
                                                    <label asp-for="PersonalDetails.Invited" class="control-label">@ResHelper.GetString("Eurobank.Application.Applicant.Address.Label.Invited")</label>
                                                </div>
                                                <div class="col-6">
                                                    @(Html.Kendo()
                                                    .RadioGroupFor(m => m.PersonalDetails.InvitedpersonforonlineIDverification.RadioGroupValue)
                                                        .Layout("horizontal")
                                                        .HtmlAttributes(new { onchange = "validatePersonalDetails()" })
                                                        .Value(Model.PersonalDetails.InvitedpersonforonlineIDverification.RadioGroupValue)
                                                        .BindTo(Model.PersonalDetails.InvitedpersonforonlineIDverification.Items))
                                                </div>
                                            </div>
                                            <span class="text-danger">@ResHelper.GetString("Eurobank.Application.Applicant.Address.Label.InvitedNote")</span>
                                        </div>
                                    </div>
                                }
                                @if (isIntroducer)
                                {
                                    <div class="pt-3">
                                        <div class="form-group">
                                            <label asp-for="PersonalDetails.SaveInRegistry" class="control-label">@ResHelper.GetString("Eurobank.Application.Applicant.Address.Label.SaveInRegistry")</label>
                                            @(Html.Kendo().CheckBoxFor(m => m.PersonalDetails.SaveInRegistry).HtmlAttributes(new { @class = "form-control" }))
                                            @Html.ValidationMessageFor(X => X.PersonalDetails.SaveInRegistry)
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                        @Html.HiddenFor(model => model.ContactDetails.IsRetriveFromRegistry)
                        @Html.HiddenFor(model => model.ContactDetails.hdnCountry_Code_MobileTelNoNumber)
                        @Html.HiddenFor(model => model.ContactDetails.hdnContactDetails_MobileTelNoNumber)
                        @Html.HiddenFor(model => model.ContactDetails.hdnCountry_Code_HomeTelNoNumber)
                        @Html.HiddenFor(model => model.ContactDetails.hdnContactDetails_HomeTelNoNumber)
                        @Html.HiddenFor(model => model.ContactDetails.hdnCountry_Code_WorkTelNoNumber)
                        @Html.HiddenFor(model => model.ContactDetails.hdnContactDetails_WorkTelNoNumber)
                        @Html.HiddenFor(model => model.ContactDetails.hdnCountry_Code_FaxNoFaxNumber)
                        @Html.HiddenFor(model => model.ContactDetails.hdnContactDetails_FaxNoFaxNumber)

                        @Html.HiddenFor(model => model.hdnCitizenship)
                        @Html.HiddenFor(model => model.hdnTypeofIdentification)
                        @Html.HiddenFor(model => model.hdnIdentificationNumber)
                        @Html.HiddenFor(model => model.hdnIssuingCountry)
                        @Html.HiddenFor(model => model.hdnIssueDateTime)
                        @Html.HiddenFor(model => model.hdnExpiryDateTime)
                    </li>
                </ul>
            </div>
        </div>
    }

    @if (Model.CompanyDetails != null && isLegalEntity)
    {
        @*List<ValidationResultModel> validationResults_PersonalDetails = null;
        string sectionValidationClass_PersonalDetails = "";
        if (ViewBag.ErrorSummaryMsgs != null)
        {
            validationResults_PersonalDetails = ViewBag.ErrorSummaryMsgs;
            if (validationResults_PersonalDetails.Any(j => !j.IsValid))
            {
                validationResults_PersonalDetails = validationResults_PersonalDetails.Where(j => !j.IsValid).ToList();
            }

            if (validationResults_PersonalDetails != null && validationResults_PersonalDetails.Count > 0)
            {
                if (validationResults_PersonalDetails.Any(x => x.ApplicationModuleName == ApplicationModule.LEGAL_ENTITY_DETAILS))
                {
                    sectionValidationClass_PersonalDetails = "bg-danger-row";
                }
                else
                {
                    sectionValidationClass_PersonalDetails = "bg-success-row";
                }
            }
            else
            {
                sectionValidationClass_PersonalDetails = "bg-success-row";
            }
        }*@
        <div class="shadow-box col-md-12" id="stPersonalDetails">
            <div class="col-md-12">
                <ul id="accordionPersonalDetails">
                    <li id="chartSection" class="k-state-active">
                        <span class="k-link sectionValidationClass_PersonalDetails" id="Span1" style="width:auto; height:auto;">
                            @ResHelper.GetString("Eurobank.Application.RelatedParty.CompanyDetails")
                        </span>
                        <div id="PersonalDetailsaccordionContentOne" class="row m-0">
                            <div class="form-group">
                                <input type="button" id="btnPersonSearch" onclick="OpenSelectConfirmPersonCom();" value="@ResHelper.GetString("Eurobank.Application.Applicant.Button.Search")" class="btn btn-primary mt-3">
                                <input type="button" id="btnPersonClear" onclick="clearCompanyDetails();" value="@ResHelper.GetString("Eurobank.Application.Applicant.Button.Clear")" class="btn btn-primary mt-3">
                            </div>
                            <div id="divRegisteredPersonCompany">

                                @(Html.Kendo().Window()
                                    .Name("CompanyPersonSearchWindow")
                                    .Title(ResHelper.GetString("Eurobank.Application.Applicant.PersonalDetails.Search.Header"))
                                    .Content(@<text>
                                        @(Html.Kendo().Grid<Eurobank.Models.Application.Common.PersonRegistyLegalSearchModel>
                                                        ()
                                                        .Name("RegPersonsCompany")
                                                        .Columns(columns =>
                                                        {
                                                //columns.Select().Width(50);
                                                columns.Bound(p => p.PersonType).Title("Type").Width(135);
                                                columns.Bound(p => p.RegisteredName).Title("ENTITY NAME").Width(200);
                                                columns.Bound(p => p.RegistrationNumber).Width(210).Title("REGISTRATION NUMBER");
                                                columns.Bound(p => p.DateofIncorporation).Width(210).Title("DATE OF REGISTRATION");
                                                columns.Bound(p => p.CountryofIncorporation).Width(240).Title("COUNTRY OF REGISTRATION");
                                            })
                                                        @*.ToolBar(toolbar =>
                                toolbar.ClientTemplate("<div class='toolbar search-address'>" +
                                "<input type='text' name='toolPersonType' placeholder='Type' class ='k-textbox' id='toolPersonType'/>" +
                                "<input type='text' name='toolRegisteredName' placeholder='Person Name' class ='k-textbox' id='toolRegisteredName'/>" +
                                "<input type='text' name='toolRegistrationNumber' placeholder='Identification Number' class ='k-textbox' id='toolRegistrationNumber'/>" +
                                "<input type='text' name='toolDateofIncorporation' placeholder='Date of Birth' class ='k-textbox' id='toolDateofIncorporation'/>" +
                                "<input type='text' name='toolCountryofIncorporation' placeholder='Country' class ='k-textbox' id='toolCountryofIncorporation'/>" +
                                "<button class='k-button' onclick='searchCompanyPersons()'>Search</button></div>"))*@
                                                        .ToolBar(toolbar =>
                                                        toolbar.ClientTemplate("<div class='toolbar'>" +
                                                        "<div class='row'><div class='col-md-12'><div class='input-group'>" +
                                                        "<input type='text' name='toolRegisteredName' placeholder='ENTITY NAME' class ='k-textbox' id='toolRegisteredName'/>" +
                                                        "</div></div></div></div>" +
                                                        "<div class='toolbar'>" +
                                                        "<div class='row'><div class='col-md-12'><div class='input-group'>" +
                                                        "<input type='text' name='toolRegistrationNumber' placeholder='REGISTRATION NUMBER' class ='k-textbox' id='toolRegistrationNumber'/>" +
                                                        "</div></div></div></div>" +
                                                        "<div class='toolbar'>" +
                                                        "<div class='row'><div class='col-md-12'><div class='input-group'>" +
                                                        "<input type='text' name='toolDateofIncorporation' placeholder='DATE OF REGISTRATION' class ='k-textbox' id='toolDateofIncorporation'/>" +
                                                        "</div></div></div></div>" +
                                                        "<div class='toolbar'>" +
                                                        "<div class='row'><div class='col-md-12'><div class='input-group'>" +
                                                        "<input type='text' name='toolCountryofIncorporation' placeholder='COUNTRY OF REGISTRATION' class ='k-textbox' id='toolCountryofIncorporation'/>" +
                                                        "</div></div></div></div>" +
                                                        "<div class='toolbar'>" +
                                                        "<div class='row'><div class='col-md-12'><div class='input-group'>" +
                                                        "<button class='k-button' onclick='searchCompanyPersons()'>Search</button>" +
                                                        "</div></div></div></div>"))
                                                        .Pageable()
                                                        .Selectable(x => x.Mode(GridSelectionMode.Single))
                                                        .Sortable()
                                                        .Scrollable()
                                                        .HtmlAttributes(new { style = "height:550px;" })
                                                        .DataSource(dataSource => dataSource
                                                        .Ajax()
                                                        .PageSize(10)
                                                        .Model(model =>
                                                        {

                                                            //model.Id(p => p.Id);
                                                model.Field(p => p.PersonType);
                                                model.Field(p => p.RegisteredName);
                                                model.Field(p => p.TradingName);
                                                model.Field(p => p.EntityType);
                                                model.Field(p => p.CountryofIncorporation);
                                                model.Field(p => p.RegistrationNumber);
                                                model.Field(p => p.DateofIncorporation);
                                                model.Field(p => p.ListingStatus);
                                                model.Field(p => p.CorporationSharesIssuedToTheBearer);
                                                model.Field(p => p.IstheEntitylocatedandoperatesanofficeinCyprus);
                                                model.Field(p => p.SharesIssuedToTheBearerName);
                                                model.Field(p => p.IsOfficeinCyprusName);
                                                model.Field(p => p.ContactDetailsLegal_PreferredMailingAddress);
                                                model.Field(p => p.ContactDetailsLegal_EmailAddressForSendingAlerts);
                                                model.Field(p => p.ContactDetailsLegal_PreferredCommunicationLanguage);

                                            })
                                                        .ServerOperation(true)
                                                        //.Read(read => read.Action("RegisteredAddresses_Read", "Registries"))
                                                        .Read(read => read.Action("PersonRegistryLegal_Read", "Registries"))
                                                        ))

                                            <div class="form-group d-flex justify-content-end">
                                                <input type="button" id="btnPersonCancel" onclick="companyPersonCancelGrid()" value="@ResHelper.GetString("Eurobank.Application.Applicant.Button.Address.Cancel")" class="btn btn-link mt-3 mr-3 k-grid-cancel">
                                                <input type="button" id="btnPersonSelect" onclick="selectCompanyPersonFromGrid()" value="@ResHelper.GetString("Eurobank.Application.Applicant.Button.Address.Select")" class="btn btn-primary mt-3">
                                            </div>
                                        </text>)
                                    .Resizable()
                                    .Visible(false)
                                    .Width(600)
                                    .Actions(actions => actions.Close())
                                    //.Events(ev => ev.Close("onSearchWindowClose"))
                                    )




                            </div>

                            @Html.HiddenFor(model => model.CompanyDetails.Id)
                            @Html.HiddenFor(model => model.CompanyDetails.IsRelatedPartyUBO)
                            @{
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label asp-for="CompanyDetails.RegisteredName" class="control-label">@ResHelper.GetString("Eurobank.Application.Applicant.CompanyDetails.Label.RegisteredName")</label>
                                        @Html.Kendo().TextBoxFor(model => model.CompanyDetails.RegisteredName).HtmlAttributes(new { @class = "form-control", @onfocusout = "validateCompanyDetails();limitlength(this,50,'CompanyDetailsRegisteredNameErrorrReq')", @onkeyup = "return limitlength(this,50,'CompanyDetailsRegisteredNameErrorrReq')", @onKeyDown = "return limitlength(this,50,'CompanyDetailsRegisteredNameErrorrReq')" })

                                        <span class="text-danger">@Html.ValidationMessageFor(X => X.CompanyDetails.RegisteredName)</span>
                                        <span id="CompanyDetailsRegisteredNameErrorrReq" class="text-danger"></span>
                                    </div>
                                    <div class="form-group">
                                        <label asp-for="CompanyDetails.EntityType" class="control-label">@ResHelper.GetString("Eurobank.Application.Applicant.CompanyDetails.Label.EntityType")</label>
                                        @(Html.Kendo().DropDownListFor(m => m.CompanyDetails.EntityType).BindTo((System.Collections.IEnumerable)ViewBag.CompanyEntities)
                                        .OptionLabel(new { Text = ResHelper.GetString("Eurobank.General.DropDownList.Select"), Value = "" })
                                        .DataValueField("Value")
                                        .DataTextField("Text").HtmlAttributes(new { @class = "form-control", onchange = "validateCompanyDetails()", id = "EntityType" }))

                                        <span class="text-danger">@Html.ValidationMessageFor(X => X.CompanyDetails.EntityType)</span>
                                    </div>
                                    <div class="form-group">
                                        <label asp-for="CompanyDetails.CountryofIncorporation" class="control-label">@ResHelper.GetString("Eurobank.Application.Applicant.CompanyDetails.Label.CountryofIncorporation")</label>
                                        @(Html.Kendo().DropDownListFor(m => m.CompanyDetails.CountryofIncorporation).BindTo((System.Collections.IEnumerable)ViewBag.Countries)
                                        .OptionLabel(new { Text = ResHelper.GetString("Eurobank.General.DropDownList.Select"), Value = "" })
                                        .DataValueField("Value")
                                        .Filter("startswith")
                                        .DataTextField("Text").HtmlAttributes(new { @class = "form-control", onchange = "validateCompanyDetails(); ShowRelatedRoles();", id = "CountryofIncorporation" }))

                                        <span class="text-danger">@Html.ValidationMessageFor(X => X.CompanyDetails.CountryofIncorporation)</span>
                                    </div>

                                    <div class="form-group">
                                        <label asp-for="CompanyDetails.RegistrationNumber" class="control-label">@ResHelper.GetString("Eurobank.Application.Applicant.CompanyDetails.Label.RegistrationNumber")</label>
                                        @Html.Kendo().TextBoxFor(model => model.CompanyDetails.RegistrationNumber).HtmlAttributes(new { @class = "form-control", onfocusout = "validateCompanyDetails();limitlength(this,50,'CompanyDetailsRegistrationNumberError')", @onkeyup = "return limitlength(this,50,'CompanyDetailsRegistrationNumberError')", @onKeyDown = "return limitlength(this,50,'CompanyDetailsRegistrationNumberError')" })
                                        @Html.ValidationMessageFor(X => X.CompanyDetails.RegistrationNumber)
                                        <span class="text-danger">@Html.ValidationMessageFor(X => X.CompanyDetails.RegistrationNumber)</span>
                                        <span id="CompanyDetailsRegistrationNumberError" class="text-danger"></span>
                                    </div>

                                    <div class="form-group">
                                        <label asp-for="CompanyDetails.DateofIncorporation" class="control-label">@ResHelper.GetString("Eurobank.Application.Applicant.CompanyDetails.Label.DateofIncorporation")</label>
                                        @Html.Kendo().DatePickerFor(model => model.CompanyDetails.DateofIncorporation).Events(e =>
                                {
                                e.Change("onChangeCompanyDetailsDOI");
                                }).Format("dd/MM/yyyy").HtmlAttributes(new { @class = "form-control" })
                                        @Html.HiddenFor(model => model.CompanyDetails.HdnDateofIncorporation)
                                        @Html.ValidationMessageFor(X => X.CompanyDetails.DateofIncorporation)
                                        <span class="text-danger">@Html.ValidationMessageFor(X => X.CompanyDetails.DateofIncorporation)</span>
                                    </div>

                                    @if (isIntroducer)
                                    {
                                        <div class="pt-3">
                                            <div class="form-group">
                                                <label asp-for="CompanyDetails.SaveInRegistry" class="control-label">@ResHelper.GetString("Eurobank.Application.Applicant.Address.Label.SaveInRegistry")</label>
                                                @(Html.Kendo().CheckBoxFor(m => m.CompanyDetails.SaveInRegistry).HtmlAttributes(new { @class = "form-control" }))
                                                @Html.ValidationMessageFor(X => X.CompanyDetails.SaveInRegistry)
                                            </div>
                                        </div>
                                    }
                                </div>

                            }

                        </div>
                    </li>
                </ul>
            </div>
        </div>
    }



    @if (Model.Id > 0)
    {
        @if (isLegalEntity)
        {
            @Html.Partial("_AddressDetails", Model)
            @Html.Partial("_PartyRolesLegal", Model)
            @*@Html.Partial("_PEPDetailsLegal", Model)
    @Html.Partial("_SourceOfIncome", Model)
    @Html.Partial("_OriginOfTotalAssets", Model)
    @Html.Partial("_IdentificationDetails", Model)
    @Html.Partial("_ContactDetails", Model)*@

        }
        else
        {
            @Html.Partial("_IdentificationDetails", Model)
            @Html.Partial("_AddressDetails", Model)
            @Html.Partial("_ContactDetails", Model)
            
            @if (Model.EmploymentDetails != null)
            {
                @*List<ValidationResultModel> validationResults_individualEmploymentDetails = null;
                string sectionValidationClass_individualEmploymentDetails = "";
                if (ViewBag.ErrorSummaryMsgs != null)
                {
                    validationResults_individualEmploymentDetails = ViewBag.ErrorSummaryMsgs;
                    if (validationResults_individualEmploymentDetails.Any(j => !j.IsValid))
                    {
                        validationResults_individualEmploymentDetails = validationResults_individualEmploymentDetails.Where(j => !j.IsValid).ToList();
                    }

                    if (validationResults_individualEmploymentDetails != null && validationResults_individualEmploymentDetails.Count > 0)
                    {
                        if (validationResults_individualEmploymentDetails.Any(x => x.ApplicationModuleName == ApplicationModule.BUSINESS_AND_FINANCIAL_PROFILE_EMPLOYMENT_DETAILS))
                        {
                            sectionValidationClass_individualEmploymentDetails = "bg-danger-row";
                        }
                        else
                        {
                            sectionValidationClass_individualEmploymentDetails = "bg-success-row";
                        }
                    }
                    else
                    {
                        sectionValidationClass_individualEmploymentDetails = "bg-success-row";
                    }
                }*@
                <div class="shadow-box col-md-12" id="stEmploymentDetails">
                    <div class="col-md-12">
                        <ul id="accordionEmploymentDetails">
                            <li id="chartSection" class="k-state-active">
                                <span class="k-link sectionValidationClass_individualEmploymentDetails" id="Span1" style="width:auto; height:auto;">
                                    @ResHelper.GetString("Eurobank.Application.Applicant.EmploymentDetails")
                                </span>
                                <div id="EmploymentDetailsaccordionContentOne" class="row m-0">
                                    <div class="col-md-6">
                                        @Html.HiddenFor(model => model.EmploymentDetails.Id)

                                        <div class="specialStatusBlock">
                                            <div class="form-group">
                                                @Html.HiddenFor(m => m.EmploymentDetails.EmploymentStatusName, new { id = "EmploymentStatusNameHdn" })
                                                <label asp-for="EmploymentDetails.EmploymentStatus" class="control-label">@ResHelper.GetString("Eurobank.Application.Applicant.EmploymentDetails.Label.EmploymentStatus")</label>
                                                @(Html.Kendo().DropDownListFor(m => m.EmploymentDetails.EmploymentStatus).BindTo((System.Collections.IEnumerable)ViewBag.EmploymentStatuses)
                                                    .OptionLabel(new { Text = ResHelper.GetString("Eurobank.General.DropDownList.Select"), Value = "" })
                                                    .DataValueField("Value")
                                                    .DataTextField("Text")
                                                    .HtmlAttributes(new { @class = "form-control", onchange = "ShowRespectedEmployment();validateBusinessAndFinancialProfile();", id = "EmploymentStatus" }))
                                                @Html.ValidationMessageFor(X => X.EmploymentDetails.EmploymentStatus)
                                            </div>
                                            <div class="form-group" id="Profession_DIV" style="display:none">
                                                <label asp-for="EmploymentDetails.Profession" class="control-label">@ResHelper.GetString("Eurobank.Application.Applicant.EmploymentDetails.Label.Profession")</label>
                                                @(Html.Kendo().DropDownListFor(m => m.EmploymentDetails.Profession).BindTo((System.Collections.IEnumerable)ViewBag.EmploymentProfessions)
                                                    .OptionLabel(new { Text = ResHelper.GetString("Eurobank.General.DropDownList.Select"), Value = "" })
                                                    .DataValueField("Value")
                                                    .Filter("startswith")
                                                    .DataTextField("Text").HtmlAttributes(new { @class = "form-control", onchange = "validateBusinessAndFinancialProfile()", id = "Profession" }))
                                                @Html.ValidationMessageFor(X => X.EmploymentDetails.Profession)
                                            </div>
                                            <div class="form-group" id="EmployersName_DIV" style="display:none">
                                                <label asp-for="EmploymentDetails.EmployersName" class="control-label">@ResHelper.GetString("Eurobank.Application.Applicant.EmploymentDetails.Label.EmployersName")</label>
                                                @Html.Kendo().TextBoxFor(model => model.EmploymentDetails.EmployersName).HtmlAttributes(new { @class = "form-control", onfocusout = "validateBusinessAndFinancialProfile()", id = "EmployersName", @onkeyup = "return limitlength(this,100,'EmploymentDetailsEmployersNameError')", @onKeyDown = "return limitlength(this,100,'EmploymentDetailsEmployersNameError')" })
                                                @Html.ValidationMessageFor(X => X.EmploymentDetails.EmployersName)
                                                <span id="EmploymentDetailsEmployersNameError" class="text-danger"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </li>
                        </ul>
                    </div>
                </div>
            }
            @if (Model.PersonalDetails != null && Model.PersonalDetails.IsRelatedPartyUBO)
            {
                @*@Html.Partial("_TaxDetails", Model)*@
                @Html.Partial("_SourceOfIncome", Model)
                @Html.Partial("_OriginOfTotalAssets", Model)
            }

            @Html.Partial("_PEPDetails", Model)
            if (string.Equals(Model.Type, "INDIVIDUAL", StringComparison.OrdinalIgnoreCase) && string.Equals(Model.ApplicationTypeName, "LEGAL ENTITY", StringComparison.OrdinalIgnoreCase))
            {
                @Html.Partial("_PartyRolesLegal", Model)
            }
            else
            {
                @Html.Partial("_PartyRoles", Model)
            }


        }
    }
    <div id="stSubmitConfirm" class="fix-appbtn" style="clear:both;">
        <div class="row justify-content-between pt-3">
            @*<div class="row">*@
            <div class="col-6">
                <a href="@Url.Action("Edit", "Applications", new { @application = Model.Application_NodeGUID})">
                    <button id="btnRelatedPartyClose" type="button" class="btn btn-link">Close Related Party</button>
                </a>

            </div>
            <div class="col-6 text-right">
                @if (Model.Id > 0)
                {
                    @if (string.Equals(Model.ApplicationStatus, ApplicationWorkflowStatus.PENDING_INITIATOR.ToString().Replace("_", " "), StringComparison.OrdinalIgnoreCase) || string.Equals(Model.ApplicationStatus, ApplicationWorkflowStatus.DRAFT.ToString().Replace("_", " "), StringComparison.OrdinalIgnoreCase) || string.Equals(Model.ApplicationStatus, ApplicationWorkflowStatus.PENDING_SIGNATURES.ToString().Replace("_", " "), StringComparison.OrdinalIgnoreCase) || string.Equals(Model.ApplicationStatus, ApplicationWorkflowStatus.PENDING_OMMISSIONS.ToString().Replace("_", " "), StringComparison.OrdinalIgnoreCase))
                    {
                        <button id="btnRelatedPartySaveAsDraft" form="relatedPartyForm" name="relatedPartyButton" value="SAVEDRAFT" type="submit" class="btn btn-success mr-3">SAVE AS DRAFT</button>
                    }
                    @if (Model.IsEdit)
                    {
                        <button id="btnRelatedPartySaveAndClose" form="relatedPartyForm" name="relatedPartyButton" value="SAVECLOSE" type="submit" class="btn btn-primary">SAVE & CLOSE</button>

                    }
                }
                else
                {
                    <button id="btnRelatedPartyProceed" form="relatedPartyForm" type="submit" class="btn btn-primary" onclick="return ValidateRelatedParty()">PROCEED</button>
                }


            </div>
        </div>
    </div>
    @(Html.Kendo().Window()
        .Name("ReSelectConfirmPersonCom")
        .Title("Confirm Legal Entity")
        .Content(@<text>
            <div>Confirm Legal Entity Selection, It will remove existing legal entity details</div>
            <div class="col-12 text-right">
                <button name="btnSelectConfirmComPerson" value="YES" type="button" class="btn btn-primary" onclick="SelectConfirmPersonComYes()">Yes</button>
                <button name="btnSelectConfirmPersonComNo" value="NO" type="button" class="btn btn-primary" onclick="SelectConfirmPersonComNo()">No</button>
            </div>
        </text>)
        //.Resizable()
        .Visible(false)
        .Width(900)
        .Height(900)
        .Actions(actions => actions.Close())

        )
    @(Html.Kendo().Window()
        .Name("pepDetailsReselctConfirmation")
        .Title("PEP DETAILS- APPLICANT")
        .Content(@<text>
            <div>Are you sure you want to change it?</div>
            <div class="col-12 text-right">
                <button name="btnSelectPepDetailsYes" value="YES" type="button" class="btn btn-primary" onclick="SelectPepDetailsYes()">Yes</button>
                <button name="btnSelectPepDetailsNo" value="NO" type="button" class="btn btn-primary" onclick="SelectPepDetailsNo()">No</button>
            </div>
        </text>)
        //.Resizable()
        .Visible(false)
        .Width(900)
        .Height(900)
        .Actions(actions => actions.Close())

        )
    @(Html.Kendo().Window()
        .Name("pepDetailsFamilyReselctConfirmation")
        .Title("PEP DETAILS- FAMILY MEMBER/ ASSOCIATE")
        .Content(@<text>
            <div>Are you sure you want to change it?</div>
            <div class="col-12 text-right">
                <button name="btnSelectPepDetailsFamilyYes" value="YES" type="button" class="btn btn-primary" onclick="SelectPepDetailsFamilyYes()">Yes</button>
                <button name="btnSelectPepDetailsFamilyNo" value="NO" type="button" class="btn btn-primary" onclick="SelectPepDetailsFamilyNo()">No</button>
            </div>
        </text>)
        //.Resizable()
        .Visible(false)
        .Width(900)
        .Height(900)
        .Actions(actions => actions.Close())

        )
</form>
@Html.Hidden("IsApplicationPermissionEdit", Model.IsEdit)
@Html.Hidden("hdnApplication_RelatedParty_LeftMenu_PEPDetails", ResHelper.GetString("Eurobank.Application.Applicant.LeftMenu.PEPDetails"))
@Html.Hidden("ValidateContactDetailsIndividualUrl", Url.Action("ValidateContactDetailsIndividual", "RelatedParty"))
@Html.Hidden("Application_RelatedParty_LegalEntity_LeftMenu_ContactDetails", ResHelper.GetString("Eurobank.Application.Applicant.LegalEntity.LeftMenu.ContactDetails"))
@Html.Hidden("ValidatePersonalDetailsUrl", Url.Action("ValidatePersonalDetails", "RelatedParty"))
@Html.Hidden("Application_RelatedParty_LegalEntity_LeftMenu_PersonalDetails", ResHelper.GetString("Eurobank.Application.Applicant.LeftMenu.PersonalDetails"))
@Html.Hidden("validateBusinessAndFinancialProfileUrl", Url.Action("ValidateBusinessProfile", "RelatedParty"))
@Html.Hidden("Application_RelatedParty_LeftMenu_BusinessProfile", ResHelper.GetString("Eurobank.Application.RelatedParty.LeftMenu.BusinessProfile"))
@Html.Hidden("ValidateCompanyDetailsUrl", Url.Action("ValidateCompanyDetails", "RelatedParty"))
@Html.Hidden("Application_Applicant_LeftMenu_CompanyDetails", ResHelper.GetString("Eurobank.Application.Applicant.LeftMenu.CompanyDetails"))
@Html.Hidden("ValidatePartyRolesIndividualUrl", Url.Action("ValidatePartyRolesIndividual", "RelatedParty"))
@Html.Hidden("Eurobank_Application_RelatedParty_LeftMenu_Roles", ResHelper.GetString("Eurobank.Application.RelatedParty.LeftMenu.Roles"))
@Html.Hidden("ValidatePartyRolesLegalUrl", Url.Action("ValidatePartyRolesLegal", "RelatedParty"))
@Html.Hidden("IsLegalEnity", isLegalEntity)
@Html.Hidden("LegalApplicantName", legalApplicantName)
@Html.Hidden("ApplicantName", applicantName)
@Html.Hidden("GetApplicantNameofRelatedPartyURL", Url.Action("GetApplicantNameofRelatedParty", "RelatedParty"))
@Html.Hidden("RedirectToApplicant", Url.Action("Index", "Applicant"))

<script src="~/Scripts/Custom/RelatedParty/RelatedParty_Index.js"></script>
<script src="~/Scripts/KendoProcess/CommonDataValidationProcess.js"></script>
@if (isLegalEntity)
{
    <script>
        $(document).ready(function () {
            validateCompanyDetails();
            validatePartyRolesLegal();
        });
    </script>
}
else
{
    <script>
        $(document).ready(function () {
            validateContactDetailsIndividual();
            validatePersonalDetails();
            validateBusinessAndFinancialProfile();
            validatePartyRolesIndividual();
            ChangeMaxLengthIndividualFaxNo();
            ChangeMaxLengthIndividualWorkNo();
            ChangeMaxLengthIndividualMobileNo();
            ChangeMaxLengthIndividualHomeNo();
        });
    </script>
}
