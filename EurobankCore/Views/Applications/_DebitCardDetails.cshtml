@model Eurobank.Models.Application.ApplicationViewModel
@using Eurobank.Helpers.Validation;
@{
    bool isLegalEntity = string.Equals(Model.EntityTypeCode, "LEGAL-ENTITY", StringComparison.OrdinalIgnoreCase);
    //List<ValidationResultModel> validationResults = null;
    //string sectionValidationClass = "";
    //if (ViewBag.ErrorSummaryMsgs != null)
    //{
    //    validationResults = ViewBag.ErrorSummaryMsgs;
    //    if (validationResults.Any(j => !j.IsValid))
    //    {
    //        validationResults = validationResults.Where(j => !j.IsValid).ToList();
    //    }

    //    if (validationResults != null && validationResults.Count > 0)
    //    {
    //        if (validationResults.Any(x => x.ApplicationModuleName == ApplicationModule.CARDS))
    //        {
    //            sectionValidationClass = "bg-danger-row";
    //        }
    //        else
    //        {
    //            sectionValidationClass = "bg-success-row";
    //        }
    //    }
    //    else
    //    {
    //        sectionValidationClass = "bg-success-row";
    //    }
    //}
}
<style type="text/css">
    .k-grid-header .k-header > .k-link {
        margin: -0.75rem 0.0rem;
        text-overflow: initial;
    }

        .k-grid-header .k-header > .k-link > .k-icon.k-i-sort-desc-sm, .k-grid-header .k-header > .k-link > .k-icon.k-i-sort-asc-sm {
            vertical-align: text-bottom;
            margin-left: 0px;
        }

    .k-grid th, .k-grid td {
        padding: 0.75rem 0.50rem;
        text-align: center;
    }
    /*.k-window-content, .k-prompt-container {
        overflow-y: scroll;
    }*/
</style>



<div class="shadow-box col-md-12">
    <div class="col-md-12">
        <ul id="accordionDebitCardDetails">
            <li id="chartSection" class="k-state-active">
                <span class="k-link sectionValidationClass" id="Span1" style="width:auto; height:auto;">
                    @ResHelper.GetString("Eurobank.Cards")
                </span>
                <div id="accordionDebitCardContentOne">

                    @(Html.Kendo().Grid<Eurobank.Models.Applications.DebitCard.DebitCardDetailsViewModel>
        ()
        .Name("DebitCardDetails")

        .Columns(columns =>
        {
                            columns.Template
                            (
                            @"<div id='target'><i class='fa fa-ellipsis-v' style='font-size:25px'></i></div>"
                            ).Width(30);
            columns.Bound(p => p.DebitCardDetails_CardTypeName).HtmlAttributes(new { style = "text-align: left;" }).Width(200).HeaderHtmlAttributes(new { style = "text-align:left;" });
            columns.Bound(p => p.DebitCardDetails_FullName).HtmlAttributes(new { style = "text-align: left;" }).HeaderHtmlAttributes(new { style="text-align:left;"}).Width(200);
                            columns.Bound(p => p.DebitCardDetails_DispatchMethodName).HtmlAttributes(new { style = "text-align: left;" }).HeaderHtmlAttributes(new { style = "text-align:left;" }).Width(200);
            columns.Bound(p => p.DebitCardDetails_StatusName).Title(ResHelper.GetString("Eurobank.Application.General.GridHeader.RecordStatus")).Width(100);
            
        })
 .Events(e =>
 {
     e.Edit("addConfirmButton_Debitcard");
     e.DataBound("onDebitCardDataBound");
     e.Cancel("onGridCancel");
 })

        .ToolBar(toolbar => { if(Model.ApplicationDetails.IsEdit) { toolbar.Create().Text("New").IconClass("justify-content-end").HtmlAttributes(new { style = "margin-left: auto;", id = "DebitCardNew" }); } })
        .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName(isLegalEntity==false? "AddEditDebitCardDetailsIndividual": "AddEditDebitCardDetails").DisplayDeleteConfirmation(false).Window(w=>w.Title("Debit Card").Width(800).Height(950))).EnableCustomBinding(true)
        .Pageable()
        .Sortable()
        .Scrollable()
        .HtmlAttributes(new { style = "max-height:550px;" })
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(10)
         .Sort(x => x.Add("DebitCardDetails_StatusName").Descending())
        //.Events(e => e.RequestStart("hideIdField"))
        .Model(model =>
        {

            model.Id(p => p.DebitCardDetailsID);
            model.Field(p => p.DebitCardDetails_CardholderName);
            model.Field(p => p.DebitCardDetails_CardTypeName);
            model.Field(p => p.DebitCardDetails_FullName);//.DefaultValue(Model.UserFullName);
            model.Field(p => p.DebitCardDetails_CollectedBy);
            model.Field(p => p.DebitCardDetails_StatusName);
        })
         //.Model(model => model.Id(p => p.AddressGuid))
         .Events(events => events.Error("error_handlerDebitCardDetails"))
        .ServerOperation(true)
        .Create(update => update.Action("DebitCardDetailsPopup_Create", "Applications",new { id=Model.Id,applicationType=Model.EntityTypeCode}))
        .Read(read => read.Action("DebitCardDetails_Read", "Applications", new { id = Model.Id, applicationType = Model.EntityTypeCode }))
        .Update(update => update.Action("DebitCardDetailsPopup_Update", "Applications", new { id = Model.Id, applicationType = Model.EntityTypeCode }))
        .Destroy(update => update.Action("DebitCardDetailsPopup_Destroy", "Applications"))
        )
		)


                </div>
            </li>
        </ul>
    </div>
</div>
@Html.Hidden("hdnApplication_LeftMenu_DebitCard", @ResHelper.GetString("Eurobank.Application.LeftMenu.DebitCards"))
@Html.Hidden("CardHoderAddresses_ReadUrl", Url.Action("CardHoderAddresses_Read", "Applications"))
<ul id="context-menuDebitCardDetails">

    @if (Model.ApplicationDetails.IsEdit)
    {
        <li id="editRowCards">Edit/View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-pencil"></span></li>
        <li id="removeRow" class="">Delete&nbsp;&nbsp;&nbsp;&nbsp;<span class="">X</span></li>
    }
    else
    {
        <li id="editRowCards">View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-preview"></span></li>
    }
</ul>
<script src="~/Scripts/Custom/Application/DebitCardDetails.js"></script>

