//--------------------------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated by code generator tool.
//
//     To customize the code use your own partial class. For more info about how to use and customize
//     the generated code see the documentation at https://docs.xperience.io/.
//
// </auto-generated>
//--------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CMS;
using CMS.Base;
using CMS.Helpers;
using CMS.DataEngine;
using CMS.DocumentEngine;
using CMS.DocumentEngine.Types.Eurobank;

[assembly: RegisterDocumentType(Lookup.CLASS_NAME, typeof(Lookup))]

namespace CMS.DocumentEngine.Types.Eurobank
{
	/// <summary>
	/// Represents a content item of type Lookup.
	/// </summary>
	public partial class Lookup : TreeNode
	{
		#region "Constants and variables"

		/// <summary>
		/// The name of the data class.
		/// </summary>
		public const string CLASS_NAME = "Eurobank.Lookup";


		/// <summary>
		/// The instance of the class that provides extended API for working with Lookup fields.
		/// </summary>
		private readonly LookupFields mFields;

		#endregion


		#region "Properties"

		/// <summary>
		/// LookupID.
		/// </summary>
		[DatabaseIDField]
		public int LookupID
		{
			get
			{
				return ValidationHelper.GetInteger(GetValue("LookupID"), 0);
			}
			set
			{
				SetValue("LookupID", value);
			}
		}


		/// <summary>
		/// Name.
		/// </summary>
		[DatabaseField]
		public string LookupName
		{
			get
			{
				return ValidationHelper.GetString(GetValue("LookupName"), @"");
			}
			set
			{
				SetValue("LookupName", value);
			}
		}


		/// <summary>
		/// Code.
		/// </summary>
		[DatabaseField]
		public string LookupCode
		{
			get
			{
				return ValidationHelper.GetString(GetValue("LookupCode"), @"");
			}
			set
			{
				SetValue("LookupCode", value);
			}
		}


		/// <summary>
		/// Gets an object that provides extended API for working with Lookup fields.
		/// </summary>
		[RegisterProperty]
		public LookupFields Fields
		{
			get
			{
				return mFields;
			}
		}


		/// <summary>
		/// Provides extended API for working with Lookup fields.
		/// </summary>
		[RegisterAllProperties]
		public partial class LookupFields : AbstractHierarchicalObject<LookupFields>
		{
			/// <summary>
			/// The content item of type Lookup that is a target of the extended API.
			/// </summary>
			private readonly Lookup mInstance;


			/// <summary>
			/// Initializes a new instance of the <see cref="LookupFields" /> class with the specified content item of type Lookup.
			/// </summary>
			/// <param name="instance">The content item of type Lookup that is a target of the extended API.</param>
			public LookupFields(Lookup instance)
			{
				mInstance = instance;
			}


			/// <summary>
			/// LookupID.
			/// </summary>
			public int ID
			{
				get
				{
					return mInstance.LookupID;
				}
				set
				{
					mInstance.LookupID = value;
				}
			}


			/// <summary>
			/// Name.
			/// </summary>
			public string Name
			{
				get
				{
					return mInstance.LookupName;
				}
				set
				{
					mInstance.LookupName = value;
				}
			}


			/// <summary>
			/// Code.
			/// </summary>
			public string Code
			{
				get
				{
					return mInstance.LookupCode;
				}
				set
				{
					mInstance.LookupCode = value;
				}
			}
		}

		#endregion


		#region "Constructors"

		/// <summary>
		/// Initializes a new instance of the <see cref="Lookup" /> class.
		/// </summary>
		public Lookup() : base(CLASS_NAME)
		{
			mFields = new LookupFields(this);
		}

		#endregion
	}
}