@model Eurobank.Models.Application.RelatedParty.RelatedPartyModel
@using Eurobank.Helpers.Validation;
@{
    var m = Model;

    string isPEP = string.Empty;
    string isPEPFamily = string.Empty;
    if (Model.CompanyDetails != null)
    {
        isPEP = Model.CompanyDetails.IsPep == true ? "true" : "false";
        isPEPFamily = Model.CompanyDetails.IsRelatedToPep == true ? "true" : "false";
    }
    //List<ValidationResultModel> validationResults = null;
    //string sectionValidationClass = "";
    //if (ViewBag.ErrorSummaryMsgs != null)
    //{
    //    validationResults = ViewBag.ErrorSummaryMsgs;
    //    if (validationResults.Any(j => !j.IsValid))
    //    {
    //        validationResults = validationResults.Where(j => !j.IsValid).ToList();
    //    }

    //    if (validationResults != null && validationResults.Count > 0)
    //    {
    //        if (validationResults.Any(x => x.ApplicationModuleName == ApplicationModule.PEP_DETAILS_RELATED_PARTY))
    //        {
    //            sectionValidationClass = "bg-danger-row";
    //        }
    //        else
    //        {
    //            sectionValidationClass = "bg-success-row";
    //        }
    //    }
    //    else
    //    {
    //        sectionValidationClass = "bg-success-row";
    //    }
    //}
}
<div class="shadow-box col-md-12" id="stPepDetailsExtend">
    @*<h4>@ResHelper.GetString("Eurobank.PoliticallyExposedPersonDetails")</h4>*@
    @*<form asp-action="PEPDetail" class="row">*@
    @Html.HiddenFor(m => m.ApplicationID)
    @Html.HiddenFor(m => m.PersonalDetails.Id)

    <div class="col-md-12">
        <ul id="accordion1">
            <li id="chartSection" class="k-state-active">
                <span class="k-link sectionValidationClass" id="Span1" style="width:auto; height:auto;">
                    @ResHelper.GetString("Eurobank.PEPDetailsRealtedParty")
                </span>
                <div id="accordionPepApplicantContentOne">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label asp-for="CompanyDetails.IsPep" class="control-label">@ResHelper.GetString("Eurobank.Application.RealtedParty.Label.IsPep")</label>
                                @(Html.Kendo().DropDownListFor(m => m.CompanyDetails.IsPep)
    .OptionLabel("- Select - ")
.DataTextField("Text")
.DataValueField("Value")
.Value(isPEP)
        .HtmlAttributes(new { @class = "form-control", title = "A PEP is a natural person who exercises or exercised in the last 12 months a prominent public function either in Cyprus or in any other country.", onchange = "ShowNewPepApplicantBtn()", id = "IsPepID" })
        .DataSource(source => {
            source.Read(read =>
            {
                read.Action("IsApplicant_Read", "Applicant");
            });
        }))
                            </div>
                        </div>
                    </div>
                    <div id="PepApplicantGridView" style="display:none">
                        @(Html.Kendo().Grid<Eurobank.Models.PEPDetails.PepApplicantViewModel>
    ()
    .Name("PepApplicant")

    .Columns(columns =>
    {
                                columns.Template
                                (
                                @"<div id='target'><i class='fa fa-ellipsis-v' style='font-size:25px'></i></div>"
                                ).Width(30);
                                columns.Bound(p => p.PepApplicant_CountryName).Width(150);
                                columns.Bound(p => p.PepApplicant_PositionOrganization).Width(150);
        columns.Bound(p => p.PepApplicant_Since).ClientTemplate("#= (PepApplicant_Since == null) ? ' ' : kendo.toString(PepApplicant_Since, \"dd/MM/yyyy \") #").Width(120);
        columns.Bound(p => p.PepApplicant_Untill).ClientTemplate("#= (PepApplicant_Untill == null) ? ' ' : kendo.toString(PepApplicant_Untill, \"dd/MM/yyyy \") #").Width(120);
        columns.Bound(p => p.StatusName).Title(ResHelper.GetString("Eurobank.Application.General.GridHeader.RecordStatus")).Width(100);
        
    })
    .Events(e =>
    {
        e.Edit("addConfirmButton_PEP_Details");
        e.DataBound("onPepDetailsDataBound");
        e.Cancel("onGridCancel");
    })
    .ToolBar(t =>
    {
        if(Model.IsEdit)
        {
            if (Model.CompanyDetails.IsPep)
            {
                t.Create().Text("New").IconClass("justify-content-end").HtmlAttributes(new { style = "margin-left: auto;",id= "newbtnPepApplicantID" });
            }
            else
            {
                t.Create().Text("New").IconClass("justify-content-end").HtmlAttributes(new { style = "margin-left: auto; display:none",id= "newbtnPepApplicant" });
            }

        }
    })

    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("AddEditPEPApplicant").DisplayDeleteConfirmation(false).Window(w => w.Title("PEP Details-Applicant").Width(800))).EnableCustomBinding(true)
    .Pageable()
    .Sortable()
    .Scrollable()

    .HtmlAttributes(new { style = "max-height:550px;" })
    .DataSource(dataSource => dataSource
    .Ajax()

    .PageSize(10)
    //.Events(e => e.RequestStart("onEdit"))
    .Model(model =>
    {

        model.Id(p => p.PepApplicantID);
    })
    .Events(events => events.Error("error_handler"))
    //.Model(model => model.Id(p => p.AddressGuid))
    .ServerOperation(true)
    .Create(update => update.Action("PEPApplicantPopup_Create", "RelatedParty", new {id=Model.Id , isLegal = true }))
    .Read(read => read.Action("PEPApplicant_Read", "RelatedParty", new { id = Model.Id,isLegal = true }))
    .Update(update => update.Action("PEPApplicantPopup_Update", "RelatedParty", new {id=Model.Id }))
    .Destroy(update => update.Action("PEPApplicantPopup_Destroy", "RelatedParty"))
    )
	)
                    </div>
                </div>
            </li>

        </ul>

    </div>
	<ul id="context-menuPepApplicant">
		@if(Model.IsEdit)
		{
			<li id="editRowPepApp">Edit/View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-pencil"></span></li>
			<li id="removeRow" class="">Delete&nbsp;&nbsp;&nbsp;&nbsp;<span class="">X</span></li>
		}
		else
		{
			<li id="editRowPepApp">View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-preview"></span></li>
		}
	</ul>
    @*@{
        List<ValidationResultModel> validationResults_pepFamily = null;
        string sectionValidationClass_pepFamily = "";
        if (ViewBag.ErrorSummaryMsgs != null)
        {
            validationResults_pepFamily = ViewBag.ErrorSummaryMsgs;
            if (validationResults_pepFamily.Any(j => !j.IsValid))
            {
                validationResults_pepFamily = validationResults_pepFamily.Where(j => !j.IsValid).ToList();
            }

            if (validationResults_pepFamily != null && validationResults_pepFamily.Count > 0)
            {
                if (validationResults_pepFamily.Any(x => x.ApplicationModuleName == ApplicationModule.PEP_DETAILS_FAMILY_MEMBER_ASSOCIATES))
                {
                    sectionValidationClass_pepFamily = "bg-danger-row";
                }
                else
                {
                    sectionValidationClass_pepFamily = "bg-success-row";
                }
            }
            else
            {
                sectionValidationClass_pepFamily = "bg-success-row";
            }
        }
    }*@
    <div class="col-md-12">
        <ul id="accordion2">
            <li id="chartSection" class="k-state-active">

                <span class="k-link sectionValidationClass_pepFamily" id="Span1" style="width:auto; height:auto;">

                    @ResHelper.GetString("Eurobank.PEPDetailsFamilyMemberAssociate")

                </span>

                <div id="accordionPepFamilyContentOne">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label asp-for="CompanyDetails.IsRelatedToPep" class="control-label">@ResHelper.GetString("Eurobank.Application.RealtedParty.Label.IsRelatedToPep")</label>
                                @(Html.Kendo().DropDownListFor(m => m.CompanyDetails.IsRelatedToPep)
            .OptionLabel("- Select - ")
        .DataTextField("Text")
        .DataValueField("Value")
        .HtmlAttributes(new { @class = "form-control", onchange = "ShowNewPepAssociateBtn()", id = "IsRelatedToPepID" })
    .Value(isPEPFamily)
        .DataSource(source => {
            source.Read(read =>
            {
                read.Action("IsApplicant_Read", "Applicant");
            });
        }))
                            </div>
                        </div>
                    </div>
                    <div id="PepAssociateGridView" style="display:none">
                        @(Html.Kendo().Grid<Eurobank.Models.PEPDetails.PepAssociatesViewModel>
()
.Name("PEPAssociates")
.Columns(columns =>
{
                                columns.Template
                                (
                                @"<div id='target'><i class='fa fa-ellipsis-v' style='font-size:25px'></i></div>"
                                ).Width(30);
                                columns.Bound(p => p.PepAssociates_FirstName).Width(150);
                                columns.Bound(p => p.PepAssociates_Surname).Width(150);
                                columns.Bound(p => p.PepAssociates_RelationshipName).Width(150);
                                columns.Bound(p => p.PepAssociates_PositionOrganization).Width(150);
                                columns.Bound(p => p.PepAssociates_CountryName).Width(150);
	columns.Bound(p => p.PepAssociates_Since).ClientTemplate("#= (PepAssociates_Since == null) ? ' ' :kendo.toString(PepAssociates_Since, \"dd/MM/yyyy \") #").Width(120);
	columns.Bound(p => p.PepAssociates_Until).ClientTemplate("#= (PepAssociates_Until == null) ? ' ': kendo.toString(PepAssociates_Until, \"dd/MM/yyyy \") #").Width(120);
                                columns.Bound(p => p.StatusName).Title(ResHelper.GetString("Eurobank.Application.General.GridHeader.RecordStatus")).Width(100);
	


})
.Events(e =>
{
	e.Edit("addConfirmButton");
	e.DataBound("onPepAssociateDataBound");
	e.Cancel("onGridCancel");
})
.ToolBar(t =>
{
	if(Model.IsEdit)
	{
		if (Model.CompanyDetails.IsRelatedToPep)
		{
			t.Create().Text("New").IconClass("justify-content-end").HtmlAttributes(new { style = "margin-left: auto;",id= "newbtnPepAssociateID" });
		}
		else
		{
			t.Create().Text("New").IconClass("justify-content-end").HtmlAttributes(new { style = "margin-left: auto; display:none",id= "newbtnPepAssociate" });
		}

	}
})
.Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("AddEditPEPAssociates").DisplayDeleteConfirmation(false).Window(w => w.Title("PEP Details-Family/Associates").Width(800))).EnableCustomBinding(true)
.Pageable()
.Sortable()
.Scrollable()

.HtmlAttributes(new { style = "max-height:550px;" })
.DataSource(dataSource => dataSource
.Ajax()

.PageSize(10)
.Sort(x => x.Add("StatusName").Descending())
.Model(model =>
{

	model.Id(p => p.PepAssociatesID);
})

.Events(events => events.Error("error_handlerPEPAssociates"))
.ServerOperation(true)
.Create(update => update.Action("PEPAssociatesPopup_Create", "RelatedParty", new { id = Model.Id, isLegal = true }))
.Read(read => read.Action("PEPAssociates_Read", "RelatedParty", new { id = Model.Id, isLegal=true }))
.Update(update => update.Action("PEPAssociatesPopup_Update", "RelatedParty"))
.Destroy(update => update.Action("PEPAssociatesPopup_Destroy", "RelatedParty"))
)
	)
                    </div>
                </div>
            </li>
        </ul>
    </div>

</div>
<ul id="context-menuPEPAssociates">
	@if(Model.IsEdit)
	{
		<li id="editRowPepAss">Edit/View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-pencil"></span></li>
		<li id="removeRow" class="">Delete&nbsp;&nbsp;&nbsp;&nbsp;<span class="">X</span></li>
	}
	else
	{
		<li id="editRowPepAss">View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-pencil"></span></li>
	}
</ul>
<script>

    function onPepDetailsDataBound(e) {
        $("#PepApplicant .k-grid-add").html("<span class='k-icon k-i-plus-circle mr-1'></span>New").addClass("new-contact").removeClass("k-button k-button-icontext");
        $("#PepApplicant .k-grid-content").attr("style", "max-height: 400px");
		var grid = $('#PepApplicant').data('kendoGrid');
		var gridRows = grid.tbody.find("tr");

		gridRows.each(function(e) {
			var rowItem = grid.dataItem($(this));
			//custom logic
			if(rowItem.PepApplicantID == 0) {
				grid.removeRow(rowItem);
			}
		});
		isAllPepDetailsConfirmed();
	}

    function onPepAssociateDataBound(e) {
        $("#PEPAssociates .k-grid-add").html("<span class='k-icon k-i-plus-circle mr-1'></span>New").addClass("new-contact").removeClass("k-button k-button-icontext");
        $("#PEPAssociates .k-grid-content").attr("style", "max-height: 400px");
		var grid = $('#PEPAssociates').data('kendoGrid');
		var gridRows = grid.tbody.find("tr");

		gridRows.each(function(e) {
			var rowItem = grid.dataItem($(this));
			//custom logic
			if(rowItem.PepAssociatesID == 0) {
				grid.removeRow(rowItem);
			}
		});
		isAllPepDetailsConfirmed();
	}

    function addConfirmButton_PEP_Details(e) {
        $(".k-widget k-window k-display-inline-flex").addClass("leftpopup");
        var model = e.model;
        model.Status = false;
        model.dirty = true;
        $("a.k-grid-cancel").addClass('btn btn-link');
		$("a.k-grid-update")[0].innerHTML = "SAVE AS DRAFT";
		$("a.k-grid-cancel")[0].innerHTML = "<span class='k-icon k-i-cancel'></span>CLOSE";

		$('<a class="k-button k-button-icontext k-primary k-grid-update custom"  href="#" k-icon k-i-delete"></span>SAVE & CLOSE</a>').insertBefore(".k-grid-update");
        $(".custom").click(function (e) {
            model.Status = true;
            RemoveAllValidationMessage();
        });

		$(".k-widget.k-window.k-display-inline-flex input").keyup(function(e) {
			var validatePopup = $(".k-popup-edit-form").kendoValidator().data("kendoValidator");
			validatePopup.validate();
			if($($(this).closest('div')).children('div.field-validation-error').length > 0) {
				if($(this).val() == '') {
					$($(this).closest('div')).children('div.field-validation-error').show();
				}
				else {
					$($(this).closest('div')).children('div.field-validation-error').hide();
				}
			}
		});

		$(".k-widget.k-window.k-display-inline-flex input").change(function(e) {
			if($($(this).closest('div')).children('div.field-validation-error').length > 0) {
				if($(this).val() == '') {
					$($(this).closest('div')).children('div.field-validation-error').show();
				}
				else {
					$($(this).closest('div')).children('div.field-validation-error').hide();
				}
			}
        });

		if(isApplicationPermisssionEdit == 'False') {
			setAllPopUpInputElementDisabled();
		}
    }
    function addConfirmButton(e) {
        $(".k-widget k-window k-display-inline-flex").addClass("leftpopup");
        var model = e.model;
        model.Status = false;
        model.dirty = true;
        $("a.k-grid-cancel").addClass('btn btn-link');
		$("a.k-grid-update")[0].innerHTML = "SAVE AS DRAFT";
		$("a.k-grid-cancel")[0].innerHTML = "<span class='k-icon k-i-cancel'></span>CLOSE";

		$('<a class="k-button k-button-icontext k-primary k-grid-update custom"  href="#" k-icon k-i-delete"></span>SAVE & CLOSE</a>').insertBefore(".k-grid-update");
        $(".custom").click(function (e) {
            model.Status = true;
			RemoveAllValidationMessage();
        });

		if(isApplicationPermisssionEdit == 'False') {
			setAllPopUpInputElementDisabled();
		}
    }
    function error_handler(args) {
        var errors = args.errors;
        if (errors) {
            var grid = $("#PepApplicant").data("kendoGrid");
            grid.one("dataBinding", function (e) {
                e.preventDefault();
                $.each(errors, function (key, value) {
                    var message = "";
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }

                    // As long as the key matches the field name, this line of code will be displayed as validation message in the popup.
                    grid.editable.element.find("[data-valmsg-for='" + key + "']").replaceWith('<div class="k-tooltip k-tooltip-error k-validator-tooltip k-invalid-msg field-validation-error" ><span class="k-tooltip-icon k-icon k-i-warning"> </span><span class="k-tooltip-content">' + message + '</span><div class="k-callout k-callout-n"></div></div>').show();
                });
            });
        }
    }
    function error_handlerPEPAssociates(args) {
        var errors = args.errors;
        if (errors) {
            var grid = $("#PEPAssociates").data("kendoGrid");
            grid.one("dataBinding", function (e) {
                e.preventDefault();
                $.each(errors, function (key, value) {
                    var message = "";
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }

                    // As long as the key matches the field name, this line of code will be displayed as validation message in the popup.
                    grid.editable.element.find("[data-valmsg-for='" + key + "']").replaceWith('<div class="k-tooltip k-tooltip-error k-validator-tooltip k-invalid-msg field-validation-error" ><span class="k-tooltip-icon k-icon k-i-warning"> </span><span class="k-tooltip-content">' + message + '</span><div class="k-callout k-callout-n"></div></div>').show();
                });
            });
        }
    }
    $("#accordion").kendoPanelBar({
        expandMode: "multiple" //options are 'single' and 'multiple'. 'multiple' is the default value
    });
    $("#accordion1").kendoPanelBar({
        expandMode: "multiple" //options are 'single' and 'multiple'. 'multiple' is the default value
    });
    $("#accordion2").kendoPanelBar({
        expandMode: "multiple" //options are 'single' and 'multiple'. 'multiple' is the default value
    });
    var accordion = $("#accordion1").data("kendoPanelBar");
    accordion.collapse("#chartSection");
    var accordion = $("#accordion2").data("kendoPanelBar");
    accordion.collapse("#chartSection");
    //var accordion = $("#accordion").data("kendoPanelBar");
    //// select the item with ID, "item1"
    //accordion.select("#gridSection");
    //accordion.collapse("#chartSection");
    //accordion.expand("#gridSection");
</script>
<script>
    $("#context-menuPepApplicant").kendoContextMenu({
        target: "#PepApplicant",
        showOn: "click",
        filter: "td:first-child",
        select: function (e) {
            var row = $(e.target).parent()[0];
            var grid = $("#PepApplicant").data("kendoGrid");
            var tr = $(e.target).closest("tr"); //get the row for deletion
            var data = grid.dataItem(tr);//get the row data so it can be referred later
            var item = e.item.id;
            switch (item) {
                case "addRow":
                    grid.addRow();
                    break;
                case "editRowPepApp":
                    grid.editRow(row);
                    break;
                case "removeRow":
                    //grid.removeRow(row);
                    DisplayDeleteConfirmationContextMenu(e, data, "PepApplicant");
                    break;
                default:
                    break;
            };
        }
    });
    $("#context-menuPEPAssociates").kendoContextMenu({
        target: "#PEPAssociates",
        showOn: "click",
        filter: "td:first-child",
        select: function (e) {
            var row = $(e.target).parent()[0];
            var grid = $("#PEPAssociates").data("kendoGrid");
            var tr = $(e.target).closest("tr"); //get the row for deletion
            var data = grid.dataItem(tr);//get the row data so it can be referred later
            var item = e.item.id;
            switch (item) {
                case "addRow":
                    grid.addRow();
                    break;
				case "editRowPepAss":
                    grid.editRow(row);
                    break;
                case "removeRow":
                    //grid.removeRow(row);
                    DisplayDeleteConfirmationContextMenu(e, data, "PEPAssociates");
                    break;
                default:
                    break;
            };
        }
    });
</script>

<script>
    function ShowNewPepApplicantBtn() {
        var IsPep = $('#IsPepID').val();
        if (IsPep == "true") {
            $("#newbtnPepApplicant").css("display", "block");
            $("#newbtnPepApplicantID").css("display", "block");
            $("#PepApplicantGridView").css("display", "block");
        }
        else {
            $("#newbtnPepApplicant").css("display", "none");
            $("#newbtnPepApplicantID").css("display", "none");
            $("#PepApplicantGridView").css("display", "none");
        }
		isAllPepDetailsConfirmed();
    }
    function ShowNewPepAssociateBtn() {
        var IsrelatedToPep = $("#IsRelatedToPepID").val();
        if (IsrelatedToPep == "true") {
            $("#newbtnPepAssociate").css("display", "block");
            $("#newbtnPepAssociateID").css("display", "block");
            $("#PepAssociateGridView").css("display", "block");
        }
        else {
            $("#newbtnPepAssociate").css("display", "none");
            $("#newbtnPepAssociateID").css("display", "none");
            $("#PepAssociateGridView").css("display", "none");
        }
		isAllPepDetailsConfirmed();
    }
    $(document).ready(function () {
        var IsPep = $('#IsPepID').val();
        if (IsPep == "true") {
            $("#PepApplicantGridView").css("display", "block");
        }
        var IsrelatedToPep = $("#IsRelatedToPepID").val();
        if (IsrelatedToPep == "true") {
            $("#PepAssociateGridView").css("display", "block");
        }
    });
</script>