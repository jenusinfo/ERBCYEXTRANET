@model Eurobank.Models.Application.ApplicationViewModel
@using Eurobank.Helpers.Validation;
@{
    bool isLegalEntity = string.Equals(Model.ApplicationDetails.ApplicationDetails_ApplicationTypeName, "LEGAL ENTITY", StringComparison.OrdinalIgnoreCase);
    //List<ValidationResultModel> validationResults = null;
    //string sectionValidationClass = "";
    //if (ViewBag.ErrorSummaryMsgs != null)
    //{
    //    validationResults = ViewBag.ErrorSummaryMsgs;
    //    if (validationResults.Any(j => !j.IsValid))
    //    {
    //        validationResults = validationResults.Where(j => !j.IsValid).ToList();
    //    }

    //    if (validationResults != null && validationResults.Count > 0)
    //    {
    //        if (validationResults.Any(x => x.ApplicationModuleName == ApplicationModule.COUNTERPARTIES_OF_OUTGOING_TRANSACTION))
    //        {
    //            sectionValidationClass = "bg-danger-row";
    //        }
    //        else
    //        {
    //            sectionValidationClass = "bg-success-row";
    //        }
    //    }
    //    else
    //    {
    //        sectionValidationClass = "bg-success-row";
    //    }
    //}
}
<style type="text/css">
    .k-grid-header .k-header > .k-link {
        margin: -0.75rem 0.0rem;
        text-overflow: initial;
    }

        .k-grid-header .k-header > .k-link > .k-icon.k-i-sort-desc-sm, .k-grid-header .k-header > .k-link > .k-icon.k-i-sort-asc-sm {
            vertical-align: text-bottom;
            margin-left: 0px;
        }

    .k-grid th, .k-grid td {
        padding: 0.75rem 0.50rem;
        text-align: center;
    }
</style>




<div class="shadow-box col-md-12">
    <div class="col-md-12">
        <ul id="accordionSourceOfOutgoingTran">
            <li id="chartSection" class="k-state-active">
                <span class="k-link sectionValidationClass" id="Span1" style="width:auto; height:auto;">

                    @*@if(isLegalEntity)
                        {
                            @ResHelper.GetString("Eurobank.Application.Legal.SourceOfOutgoingTransactions")
                        }
                        else
                        {
                            @ResHelper.GetString("Eurobank.Application.SourceOfOutgoingTransactions")
                        }*@
                    @ResHelper.GetString("Eurobank.Application.Legal.SourceOfOutgoingTransactions")
                </span>
                <div id="accordionContentOne">


                    @(Html.Kendo().Grid<Eurobank.Models.Application.SourceOfOutgoingTransactionsModel>
	()
	.Name("SourceOfOutgoingTran")

	.Columns(columns =>
	{
							columns.Template
							(
							@"<div id='target'><i class='fa fa-ellipsis-v' style='font-size:25px'></i></div>"
							).Width(30);
							columns.Bound(p => p.NameOfBeneficiary).HtmlAttributes(new { style = "text-align: left;" }).HeaderHtmlAttributes(new { style = "text-align:left;" }).Width(200);
							columns.Bound(p => p.CountryOfBeneficiary).HtmlAttributes(new { style = "text-align: left;" }).HeaderHtmlAttributes(new { style = "text-align:left;" }).Width(150);
							columns.Bound(p => p.CountryOfBeneficiaryBank).HtmlAttributes(new { style = "text-align: left;" }).HeaderHtmlAttributes(new { style = "text-align:left;" }).Width(150);
		columns.Bound(p => p.StatusName).Title(ResHelper.GetString("Eurobank.Application.General.GridHeader.RecordStatus")).Width(100);
		//columns.Command(command => { command.Edit().IconClass("fa fa-edit").UpdateText("Save").CancelText("Close"); command.Destroy().IconClass("fa fa-trash");}).Width(200).HtmlAttributes(new { style = "text-align: center;" }).Title(ResHelper.GetString("Eurobank.Application.General.GridHeader.Actions")).HeaderHtmlAttributes(new { style = "text-align: center;" });
		
	})
	.Events(e =>
	{
		e.Edit("addConfirmButton_SOT");
		e.DataBound("onGridDataBoundSourceOfOutgoingTran");
		e.Cancel("onGridCancel");
	})
	.ToolBar(toolbar => { if(Model.ApplicationDetails.IsEdit) { toolbar.Create().Text("New").IconClass("justify-content-end").HtmlAttributes(new { style = "margin-left: auto;" }); } })

	//.Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("AddEditOutgoingTransaction").DisplayDeleteConfirmation("Delete?").Window(w=>w.Title("Source Of Incoming Transactions").Width(800))).EnableCustomBinding(true)
	.Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("AddEditOutgoingTransaction").DisplayDeleteConfirmation(false).Window(w => w.Title(ResHelper.GetString(isLegalEntity ? "Eurobank.Application.Legal.SourceOfOutgoingTransactions" : "Eurobank.Application.SourceOfOutgoingTransactions")).Width(800))).EnableCustomBinding(true)
	.Pageable()
	.Sortable()
	.Scrollable()
	.HtmlAttributes(new { style = "max-height:550px;" })
	.DataSource(dataSource => dataSource
	.Ajax()
	.PageSize(10)
	.Sort(x => x.Add("StatusName").Descending())
	//.Events(e => e.RequestStart("hideIdField"))
	.Model(model =>
	{

		model.Id(p => p.Id);
		model.Field(p => p.NameOfBeneficiary);
		model.Field(p => p.CountryOfBeneficiary);
		model.Field(p => p.CountryOfBeneficiaryBank);
		//model.Field(p => p.SourceOfIncomingTransactions_CountryOfRemitter);
		//model.Field(p => p.SourceOfIncomingTransactions_CountryOfRemitterBank);
		//model.Field(p => p.nodePath);
	})
	//.Model(model => model.Id(p => p.AddressGuid))
	.Events(events => events.Error("error_handlerSourceOfOutcomingTransactions"))
	.ServerOperation(true)
	.Create(update => update.Action("OutgoingTransactionPopup_Create", "Applications",new { apID = Model.Id}))
	.Read(read => read.Action("OutgoingTransaction_Read", "Applications"))
	.Update(update => update.Action("OutgoingTransactionPopup_Update", "Applications"))
	.Destroy(update => update.Action("OutgoingTransactionPopup_Destroy", "Applications"))
	)
	)

                </div>
            </li>
        </ul>
    </div>
</div>
<ul id="context-menuSourceOfOutgoingTran">

    @if (Model.ApplicationDetails.IsEdit)
    {
		<li id="editRowSOO">Edit/View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-pencil"></span></li>
        <li id="removeRow" class="">Delete&nbsp;&nbsp;&nbsp;&nbsp;<span class="">X</span></li>
    }
    else
    {
        <li id="editRowSOO">View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-preview"></span></li>
    }
</ul>
<script src="~/Scripts/Custom/Application/SourceOfOutgoingTransaction.js"></script>

