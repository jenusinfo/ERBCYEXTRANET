@model Eurobank.Models.Application.Applicant.ApplicantModel
@using Eurobank.Helpers.Validation;
@{
    bool isLegalEntity = string.Equals(Model.Type, "LEGAL ENTITY", StringComparison.OrdinalIgnoreCase);
    //List<ValidationResultModel> validationResults = null;
    //string sectionValidationClass = "";
    //if (ViewBag.ErrorSummaryMsgs != null)
    //{
    //    validationResults = ViewBag.ErrorSummaryMsgs;
    //    if (validationResults.Any(j => !j.IsValid))
    //    {
    //        validationResults = validationResults.Where(j => !j.IsValid).ToList();
    //    }

    //    if (validationResults != null && validationResults.Count > 0)
    //    {
    //        if (validationResults.Any(x => x.ApplicationModuleName == ApplicationModule.ORIGIN_OF_TOTAL_ASSETS))
    //        {
    //            sectionValidationClass = "bg-danger-row";
    //        }
    //        else
    //        {
    //            sectionValidationClass = "bg-success-row";
    //        }
    //    }
    //    else
    //    {
    //        sectionValidationClass = "bg-success-row";
    //    }
    //}
}
<style type="text/css">
    .k-grid-header .k-header > .k-link {
        margin: -0.75rem 0.0rem;
        text-overflow: initial;
        padding: 0.75rem 0.0rem;
    }

        .k-grid-header .k-header > .k-link > .k-icon.k-i-sort-desc-sm, .k-grid-header .k-header > .k-link > .k-icon.k-i-sort-asc-sm {
            vertical-align: text-bottom;
            margin-left: 0px;
        }

    .k-grid th, .k-grid td {
        padding: 0.75rem 0.50rem;
        text-align: left;
    }
</style>

<div class="shadow-box col-md-12">

    <ul id="accordionOriginOfTotal">
        <li id="chartSection" class="k-state-active">
            <span class="k-link sectionValidationClass" id="Span1" style="width:auto; height:auto;">
                @ResHelper.GetString("Eurobank.Application.Applicant.OriginOfTotalAssets.AccordionHeader")
            </span>
            <div id="accordionContentOne">
                @(Html.Kendo().Grid<Eurobank.Models.Application.Applicant.OriginOfTotalAssetsModel>
                    ()
                    .Name("OriginOfTotal")
                    .Columns(columns =>
                    {
                        columns.Template
                        (
                        @"<div id='target'><i class='fa fa-ellipsis-v' style='font-size:25px'></i></div>"
                        ).Width(30);
                        //columns.Bound(p => p.SlNo).Title(ResHelper.GetString("Eurobank.Application.General.GridHeader.Id")).Width(30);
                        columns.Bound(p => p.OriginOfTotalAssetsName).Title(ResHelper.GetString("Eurobank.Application.Applicant.OriginOfTotalAssets.GridHeader.OriginOfTotalAssetsName")).Width(200);
                        columns.Bound(p => p.SpecifyOtherOrigin).Title(ResHelper.GetString("Eurobank.Application.Applicant.OriginOfTotalAssets.GridHeader.SpecifyOtherOrigin")).Width(200);
                        columns.Bound(p => p.AmountOfTotalAsset).Title(ResHelper.GetString("Eurobank.Application.Applicant.OriginOfTotalAssets.GridHeader.AmountOfTotalAsset")).Format("{0:N2}").Width(200).HtmlAttributes(new { style = "text-align: right;" }).HeaderHtmlAttributes(new { style = "text-align: right;" });
                        columns.Bound(p => p.StatusName).Title(ResHelper.GetString("Eurobank.Application.General.GridHeader.RecordStatus")).Width(100).HtmlAttributes(new { style = "text-align: center;" }).HeaderHtmlAttributes(new { style = "text-align: center;" });
                    })
                    .Events(e =>
                    {
                        e.Edit("addConfirmButton_OriginOfTotalAssests");
                        e.DataBound("onGridDataBoundOriginOfTotal");
                        e.Cancel("onGridCancel");
                    })
                    .ToolBar(toolbar => { if (Model.IsEdit) { toolbar.Create().Text("New").IconClass("justify-content-end").HtmlAttributes(new { style = "margin-left: auto;" }); } })

                    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("AddEditOriginOfTotalAssets").DisplayDeleteConfirmation(false).Window(w => w.Title(ResHelper.GetString("Eurobank.Application.Applicant.OriginOfTotalAssets.PopUp.Title")).Width(800))).EnableCustomBinding(true)
                    .Pageable()
                    .Sortable()
                    .Scrollable()
                    .HtmlAttributes(new { style = "max-height:550px;" })
                    .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(10)
                    .Sort(x => x.Add("StatusName").Descending())
                    //.Events(e => e.RequestStart("hideIdField"))
                    .Model(model =>
                    {

                        model.Id(p => p.Id);
                        model.Field(p => p.OriginOfTotalAssets);
                        model.Field(p => p.OriginOfTotalAssetsName);
                        model.Field(p => p.SpecifyOtherOrigin);
                        model.Field(p => p.Status);
                        model.Field(p => p.StatusName);
                        model.Field(p => p.AmountOfTotalAsset);
                    })
                    //.Model(model => model.Id(p => p.AddressGuid))
                    .Events(events => events.Error("error_handlerOriginOfTotal"))
                    .ServerOperation(true)
                    .Create(update => update.Action("OriginOfTotalAssetsPopup_Create", "Applicant", new { apID = Model.Id, applicationType = Model.Type }))
                    .Read(read => read.Action("OriginOfTotalAssets_Read", "Applicant", new { apID = Model.Id, applicationType = Model.Type }))
                    .Update(update => update.Action("OriginOfTotalAssetsPopup_Update", "Applicant", new { apID = Model.Id, applicationType = Model.Type }))
                    .Destroy(update => update.Action("OriginOfTotalAssetsPopup_Destroy", "Applicant"))
                    )
                    )
            </div>
        </li>
    </ul>

</div>
<ul id="context-menuOriginOfTotal">

    @if (Model.IsEdit)
    {
        <li id="editRowOOT">Edit/View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-pencil"></span></li>
        <li id="removeRow" class="">Delete&nbsp;&nbsp;&nbsp;&nbsp;<span class="">X</span></li>
    }
    else
    {
        <li id="editRowOOT">View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-preview"></span></li>
    }
</ul>
@Html.Hidden("hdnIsLegalEntity", isLegalEntity)
<script src="~/scripts/custom/applicant/applicant_originoftotalassets.js"></script>

