@model Eurobank.Models.Application.ApplicationViewModel
@using Eurobank.Helpers.Validation;
<style type="text/css">
    .k-grid-header .k-header > .k-link {
        margin: -0.75rem 0.0rem;
        text-overflow: initial;
    }

        .k-grid-header .k-header > .k-link > .k-icon.k-i-sort-desc-sm, .k-grid-header .k-header > .k-link > .k-icon.k-i-sort-asc-sm {
            vertical-align: text-bottom;
            margin-left: 0px;
        }

    .k-grid th, .k-grid td {
        padding: 0.75rem 0.50rem;
        text-align: center;
    }
</style>
@*@{
    List<ValidationResultModel> validationResults = null;
    string sectionValidationClass = "";
    if (ViewBag.ErrorSummaryMsgs != null)
    {
        validationResults = ViewBag.ErrorSummaryMsgs;
        if (validationResults.Any(j => !j.IsValid))
        {
            validationResults = validationResults.Where(j => !j.IsValid).ToList();
        }

        if (validationResults != null && validationResults.Count > 0)
        {
            if (validationResults.Any(x => x.ApplicationModuleName == ApplicationModule.APPLICANTS))
            {
                sectionValidationClass = "bg-danger-row";
            }
            else
            {
                sectionValidationClass = "bg-success-row";
            }
        }
        else
        {
            sectionValidationClass = "bg-success-row";
        }
    }
}*@
<div class="shadow-box col-md-12">
    <div class="col-md-12">
        <ul id="accordionApplicants">
            <li id="chartSection" class="k-state-active">
                <span class="k-link sectionValidationClass" id="Span1" style="width:auto; height:auto;">
                    @ResHelper.GetString("Eurobank.Application.Applicants")
                </span>
                <div id="accordionApplicantsContentOne">

                    @if (Model.ApplicationDetails.IsEdit)
                    {
                        <div class="d-flex justify-content-between" id="divCreateNewApplicant">
                            @*<h3>@ResHelper.GetString("Eurobank.Application.Applicants")</h3>*@
                            <h3></h3>
                            <a id="lnkCreateNewApplicant" class="new-contact" href="@Url.Action("Index", "Applicant", new { application = Model.Application_NodeGUID })">
                                <span class="k-icon k-i-plus-circle mr-1"></span>
                                New
                            </a>
                        </div>
                    }


                    @(Html.Kendo().Grid<Eurobank.Models.Application.Applicant.ApplicantModel>
        ()
        .Name("Applicants")
        .Columns(columns =>
        {
                            columns.Template
                            (
                            @"<div id='target'><i class='fa fa-ellipsis-v' style='font-size:25px'></i></div>"
                            ).Width(30);
            columns.Bound(p => p.Id).Hidden();
                            columns.Bound(p => p.FirstIdentificationNumber).Title("ID").Width(150);
            //columns.Bound(p => p.ApplicantNumber).Title("ID").Width(70);
            //columns.Bound(p => p.rowID).Title("ID").Width(70);
                            columns.Bound(p => p.FullName).HtmlAttributes(new { style = "text-align: left;" }).HeaderHtmlAttributes(new { style = "text-align:left;" }).Width(200);
                            columns.Bound(p => p.Type).HtmlAttributes(new { style = "text-align: center;" }).HeaderHtmlAttributes(new { style = "text-align:center;" }).Width(100);
                            //columns.Bound(p => p.Invited).HtmlAttributes(new { style = "text-align: center;" }).HeaderHtmlAttributes(new { style = "text-align:center;" }).Width(100);
                            //columns.Bound(p => p.IdVerified).HtmlAttributes(new { style = "text-align: center;" }).HeaderHtmlAttributes(new { style = "text-align:center;" }).Width(100);
            columns.Bound(p => p.Status).Title(ResHelper.GetString("Eurobank.Application.General.GridHeader.RecordStatus")).Width(100);
                  })
        .Events(e =>
        {
            e.Edit("onGridEditing");
            e.DataBound("onApplicantDataBound");
            e.Cancel("onGridCancel");
        })
        //.ToolBar(toolbar => toolbar.Create().Text("New").IconClass("justify-content-end").HtmlAttributes(new { style = "margin-left: auto;" }))

        //.Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("AddEditOutgoingTransaction").DisplayDeleteConfirmation("Delete?").Window(w=>w.Title("Source Of Incoming Transactions").Width(800))).EnableCustomBinding(true)
        .Pageable()
        .Sortable()
        .Scrollable()
         .HtmlAttributes(new { style = "max-height:550px;" })
        .DataSource(dataSource => dataSource
        .Ajax()
        .ServerOperation(false)

        .PageSize(10)
        //.Sort(x => x.Add("Status").Descending())
        //.Events(e => e.RequestStart("hideIdField"))
        .Model(model =>
        {
            model.Id(p => p.NodeGUID);
            model.Field(p => p.ApplicantNumber);
            model.Field(p => p.FullName);
            model.Field(p => p.Type);
            model.Field(p => p.Invited);
            model.Field(p => p.IdVerified);
            model.Field(p => p.FirstIdentificationNumber);
            model.Field(p => p.Status);
        })
        //.Model(model => model.Id(p => p.AddressGuid))

        //.Create(update => update.Action("OutgoingTransactionPopup_Create", "Applications",new { apID = Model.Id}))
        .Read(read => read.Action("Applicant_Read", "Applications"))
        //.Update(update => update.Action("OutgoingTransactionPopup_Update", "Applications"))
        .Destroy(update => update.Action("ApplicantPopup_Destroy", "Applications"))
        //.Events(events => events.RequestEnd("onRequestEnd"))
        )
		)

                </div>
            </li>
        </ul>
    </div>
</div>
@Html.Hidden("hdnApplication_LeftMenu_Applicants", @ResHelper.GetString("Eurobank.Application.LeftMenu.Applicants"))
@Html.Hidden("hdnapplicationId", Model.Id)
@Html.Hidden("ApplicationTypeName", Model.ApplicationDetails.ApplicationDetails_ApplicationTypeName)
@Html.HiddenFor(m => m.Application_NodeGUID, new { id = "ApplicationNodeGUID" })
@Html.Hidden("RedirectToApplicant", Url.Action("Index", "Applicant"))
<ul id="context-menuApplicants">
    @if (Model.ApplicationDetails.IsEdit)
    {
        <li id="editRowApplicants">Edit/View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-pencil"></span></li>
        <li id="removeRow" class="">Delete&nbsp;&nbsp;&nbsp;&nbsp;<span class="">X</span></li>
    }
    else
    {
        <li id="editRowApplicants">View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-preview"></span></li>
    }
</ul>
<script src="~/Scripts/Custom/Application/Applicant.js"></script>

