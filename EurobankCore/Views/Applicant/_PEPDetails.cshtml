@model Eurobank.Models.Application.Applicant.ApplicantModel
@using Eurobank.Helpers.Validation;
@{
    var m = Model;
    string isPEP = Model.PersonalDetails.IsPep == true ? "true" : "false";
    string isPEPFamily = Model.PersonalDetails.IsRelatedToPep == true ? "true" : "false";
    //List<ValidationResultModel> validationResults = null;
    //string sectionValidationClass = "";
    //if (ViewBag.ErrorSummaryMsgs != null)
    //{
    //    validationResults = ViewBag.ErrorSummaryMsgs;
    //    if (validationResults.Any(j => !j.IsValid))
    //    {
    //        validationResults = validationResults.Where(j => !j.IsValid).ToList();
    //    }

    //    if (validationResults != null && validationResults.Count > 0)
    //    {
    //        if (validationResults.Any(x => x.ApplicationModuleName == ApplicationModule.PEP_DETAILS_APPLICANT))
    //        {
    //            sectionValidationClass = "bg-danger-row";
    //        }
    //        else
    //        {
    //            sectionValidationClass = "bg-success-row";
    //        }
    //    }
    //    else
    //    {
    //        sectionValidationClass = "bg-success-row";
    //    }
    //}
}
<div class="shadow-box col-md-12" id="stPepDetailsExtend">
    @*<h4>@ResHelper.GetString("Eurobank.PoliticallyExposedPersonDetails")</h4>*@
    @*<form asp-action="PEPDetail" class="row">*@
    @Html.HiddenFor(m => m.ApplicationId)
    @Html.HiddenFor(m => m.PersonalDetails.Id, new { id = "PersonalDetailsID" })

    <div class="col-md-12 p-0 mb-4">
        <ul id="accordion1">
            <li id="chartSection" class="k-state-active">
                <span class="k-link sectionValidationClass" id="Span1" style="width:auto; height:auto;">
                    @ResHelper.GetString("Eurobank.PEPDetailsApplication")
                </span>
                <div id="accordionPepApplicantContentOne">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label asp-for="PersonalDetails.IsPepName" class="control-label"></label>
                                @(Html.Kendo().DropDownListFor(m => m.PersonalDetails.IsPepName)
	.OptionLabel("- Select - ")
.DataTextField("Text")
.DataValueField("Value")
                                    .HtmlAttributes(new { @class = "form-control", title = "A PEP is a natural person who exercises or exercised in the last 12 months a prominent public function either in Cyprus or in any other country.", onchange = "onchangeIsPepApplicant();", id = "IsPepID" }) //ShowNewPepApplicantBtn();OpenSelectConfirmPepDetails();
		.DataSource(source => {
			source.Read(read =>
			{
				read.Action("IsApplicant_Read", "Applicant");
			});
		}))
                            </div>
                        </div>
                    </div>
                    <div id="PepApplicantGridView" style="display:none">
                        @(Html.Kendo().Grid<Eurobank.Models.PEPDetails.PepApplicantViewModel>
    ()
    .Name("PepApplicant")
    .Columns(columns =>
    {
                                columns.Template
                                (
                                @"<div id='target'><i class='fa fa-ellipsis-v' style='font-size:25px'></i></div>"
                                ).Width(30);
        //columns.Bound(p => p.PepApplicant_FirstName);
        //columns.Bound(p=>p.PepApplicant_Surname);
                                columns.Bound(p => p.PepApplicant_CountryName).Width(150);
                                columns.Bound(p => p.PepApplicant_PositionOrganization).Width(150);
        columns.Bound(p => p.PepApplicant_Since).ClientTemplate("#= (PepApplicant_Since == null) ? ' ' : kendo.toString(PepApplicant_Since, \"dd/MM/yyyy \") #").Width(120);
        columns.Bound(p => p.PepApplicant_Untill).ClientTemplate("#= (PepApplicant_Untill == null) ? ' ' : kendo.toString(PepApplicant_Untill, \"dd/MM/yyyy \") #").Width(120);
        columns.Bound(p => p.StatusName).Title(ResHelper.GetString("Eurobank.Application.General.GridHeader.RecordStatus")).Width(100);
        


    })
    .Events(e =>
    {
        e.Edit("addConfirmButton_PEPDetails");
        e.DataBound("onPepDetailsDataBound");
        e.Cancel("onGridCancel");
    })
    .ToolBar(t =>
    {
        if(Model.IsEdit)
        {
            if (string.Equals(Model.PersonalDetails.IsPepName, "true", StringComparison.OrdinalIgnoreCase))
            {
                t.Create().Text("New").IconClass("justify-content-end").HtmlAttributes(new { style = "margin-left: auto;", id = "newbtnPepApplicantID" });
            }
            else
            {
                t.Create().Text("New").IconClass("justify-content-end").HtmlAttributes(new { style = "margin-left: auto; display:none", id="newbtnPepApplicant" });
            }

        }
    })
    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("AddEditPEPApplicant").DisplayDeleteConfirmation(false).Window(w => w.Title("PEP Details-Applicant").Width(800))).EnableCustomBinding(true)
    .Pageable()
    .Sortable()
    .Scrollable()

     .HtmlAttributes(new { style = "max-height:550px;" })
    .DataSource(dataSource => dataSource
    .Ajax()

    .PageSize(10)
    .Sort(x => x.Add("StatusName").Descending())
    .Model(model =>
    {

        model.Id(p => p.PepApplicantID);
    })
    .Events(events => events.Error("error_handler"))
    //.Model(model => model.Id(p => p.AddressGuid))
    .ServerOperation(true)
    .Create(update => update.Action("PEPApplicantPopup_Create", "Applicant", new {id=Model.Id }))
    .Read(read => read.Action("PEPApplicant_Read", "Applicant", new { id = Model.Id }))
    .Update(update => update.Action("PEPApplicantPopup_Update", "Applicant", new {id=Model.Id }))
    .Destroy(update => update.Action("PEPApplicantPopup_Destroy", "Applicant"))
    )
	)
                    </div>
                </div>
            </li>

        </ul>

    </div>
    <ul id="context-menuPepApplicant">
        @if (Model.IsEdit)
        {
            <li id="editRowPepApp">Edit/View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-pencil"></span></li>
            <li id="removeRow" class="">Delete&nbsp;&nbsp;&nbsp;&nbsp;<span class="">X</span></li>
        }
        else
        {
            <li id="editRowPepApp">View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-preview"></span></li>
        }
    </ul>
    @{
        //List<ValidationResultModel> validationResults_pepFamily = null;
        //string sectionValidationClass_pepFamily = "";
        //if (ViewBag.ErrorSummaryMsgs != null)
        //{
        //    validationResults_pepFamily = ViewBag.ErrorSummaryMsgs;
        //    if (validationResults_pepFamily.Any(j => !j.IsValid))
        //    {
        //        validationResults_pepFamily = validationResults_pepFamily.Where(j => !j.IsValid).ToList();
        //    }

        //    if (validationResults_pepFamily != null && validationResults_pepFamily.Count > 0)
        //    {
        //        if (validationResults_pepFamily.Any(x => x.ApplicationModuleName == ApplicationModule.PEP_DETAILS_FAMILY_MEMBER_ASSOCIATES))
        //        {
        //            sectionValidationClass_pepFamily = "bg-danger-row";
        //        }
        //        else
        //        {
        //            sectionValidationClass_pepFamily = "bg-success-row";
        //        }
        //    }
        //    else
        //    {
        //        sectionValidationClass_pepFamily = "bg-success-row";
        //    }
        //}
    }
    <div class="col-md-12 p-0 mb-4">
        <ul id="accordion2">
            <li id="chartSection" class="k-state-active">

                <span class="k-link sectionValidationClass_pepFamily" id="Span1" style="width:auto; height:auto;">

                    @ResHelper.GetString("Eurobank.PEPDetailsFamilyMemberAssociate")

                </span>

                <div id="accordionPepFamilyContentOne">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label asp-for="PersonalDetails.IsRelatedToPepName" class="control-label"></label>
                                @(Html.Kendo().DropDownListFor(m => m.PersonalDetails.IsRelatedToPepName)
            .OptionLabel("- Select - ")
        .DataTextField("Text")
        .DataValueField("Value")
                                    .HtmlAttributes(new { @class = "form-control", onchange = "onchangeIsPerAssociate()", id = "IsRelatedToPepID" })
        .DataSource(source => {
            source.Read(read =>
            {
                read.Action("IsApplicant_Read", "Applicant");
            });
        }))
                            </div>
                        </div>
                    </div>
                    <div id="PepAssociateGridView" style="display:none">
                        @(Html.Kendo().Grid<Eurobank.Models.PEPDetails.PepAssociatesViewModel>
    ()
    .Name("PEPAssociates")
    //.Events(clientEvents => clientEvents.Cancel("onCancelAssociates"))
    .Columns(columns =>
    {
                                columns.Template
                                (
                                @"<div id='target'><i class='fa fa-ellipsis-v' style='font-size:25px'></i></div>"
                                ).Width(30);
                                columns.Bound(p => p.PepAssociates_FirstName).Width(150);
                                columns.Bound(p => p.PepAssociates_Surname).Width(150);
                                columns.Bound(p => p.PepAssociates_RelationshipName).Width(150);
                                columns.Bound(p => p.PepAssociates_PositionOrganization).Width(150);
                                columns.Bound(p => p.PepAssociates_CountryName).Width(150);
        columns.Bound(p => p.PepAssociates_Since).ClientTemplate("#= (PepAssociates_Since == null) ? ' ' :kendo.toString(PepAssociates_Since, \"dd/MM/yyyy \") #").Width(120);
        columns.Bound(p => p.PepAssociates_Until).ClientTemplate("#= (PepAssociates_Until == null) ? ' ': kendo.toString(PepAssociates_Until, \"dd/MM/yyyy \") #").Width(120);
        columns.Bound(p => p.StatusName).Title(ResHelper.GetString("Eurobank.Application.General.GridHeader.RecordStatus")).Width(100);
        


    })
    .Events(e =>
    {
        e.Edit("addConfirmButton_PEPAssociates");
        e.DataBound("onPepAssociateDataBound");
        e.Cancel("onGridCancel");
    })
    .ToolBar(t =>
    {
        if(Model.IsEdit)
        {
            if (string.Equals(Model.PersonalDetails.IsRelatedToPepName, "true", StringComparison.OrdinalIgnoreCase))
            {
                t.Create().Text("New").IconClass("justify-content-end").HtmlAttributes(new { style = "margin-left: auto;", id = "newbtnPepAssociateID" });
            }
            else
            {
                t.Create().Text("New").IconClass("justify-content-end").HtmlAttributes(new { style = "margin-left: auto; display:none",id= "newbtnPepAssociate" });
            }

        }
    })
    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("AddEditPEPAssociates").DisplayDeleteConfirmation(false).Window(w => w.Title("PEP Details-Family/Associates").Width(800))).EnableCustomBinding(true)
    .Pageable()
    .Sortable()
    .Scrollable()

    .HtmlAttributes(new { style = "max-height:550px;" })
    .DataSource(dataSource => dataSource
    .Ajax()

    .PageSize(10)
     .Sort(x => x.Add("StatusName").Descending())
    //.Events(e => e.RequestStart("onEdit"))
    .Model(model =>
    {

        model.Id(p => p.PepAssociatesID);
    })

    .Events(events => events.Error("error_handlerPEPAssociates"))
    .ServerOperation(true)
    .Create(update => update.Action("PEPAssociatesPopup_Create", "Applicant", new {id=Model.Id }))
    .Read(read => read.Action("PEPAssociates_Read", "Applicant", new { id = Model.Id }))
    .Update(update => update.Action("PEPAssociatesPopup_Update", "Applicant"))
    .Destroy(update => update.Action("PEPAssociatesPopup_Destroy", "Applicant"))
    )
	)
                    </div>
                </div>
            </li>
        </ul>
    </div>

</div>
@Html.Hidden("ValidatePepDatesUrl",Url.Action("ValidatePepDates", "RelatedParty"))
@Html.Hidden("PEPApplicantPopup_DestroyAllUrl",Url.Action("PEPApplicantPopup_DestroyAll", "Applicant"))
@Html.Hidden("PEPAssociatesPopup_DestroyAllUrl",Url.Action("PEPAssociatesPopup_DestroyAll", "Applicant"))
<ul id="context-menuPEPAssociates">
    @if (Model.IsEdit)
    {
        <li id="editRowPepAss">Edit/View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-pencil"></span></li>
        <li id="removeRow" class="">Delete&nbsp;&nbsp;&nbsp;&nbsp;<span class="">X</span></li>
    }
    else
    {
        <li id="editRowPepAss">View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-pencil"></span></li>
    }
</ul>
<script src="~/Scripts/Custom/Applicant/Applicant_PepDetails.js"></script>