@model Eurobank.Models.Application.Applicant.ApplicantModel
@using Eurobank.Helpers.Validation;

@{
    bool isLegalEntity = string.Equals(Model.Type, "LEGAL ENTITY", StringComparison.OrdinalIgnoreCase);
    //List<ValidationResultModel> validationResults = null;
    //string sectionValidationClass = "";
    //if (ViewBag.ErrorSummaryMsgs != null)
    //{
    //    validationResults = ViewBag.ErrorSummaryMsgs;
    //    if (validationResults.Any(j => !j.IsValid))
    //    {
    //        validationResults = validationResults.Where(j => !j.IsValid).ToList();
    //    }

    //    if (validationResults != null && validationResults.Count > 0)
    //    {
    //        if (validationResults.Any(x => x.ApplicationModuleName == ApplicationModule.ADDRESS_DETAILS))
    //        {
    //            sectionValidationClass = "bg-danger-row";
    //        }
    //        else
    //        {
    //            sectionValidationClass = "bg-success-row";
    //        }
    //    }
    //    else
    //    {
    //        sectionValidationClass = "bg-success-row";
    //    }
    //}
}
<style>
    .k-grid tbody tr {
        height: 50px;
    }
</style>
<div class="shadow-box col-md-12">
    <ul id="accordionAddressDetails">
        <li id="chartSection" class="k-state-active">
            <span class="k-link sectionValidationClass" id="Span1" style="width:auto; height:auto;">
                @ResHelper.GetString("Eurobank.Application.Applicant.AddressDetails")
            </span>
            <div id="accordionAddressContentOne">
                @(Html.Kendo().Grid<Eurobank.Models.Application.Common.AddressDetailsModel>
        ()
        .Name("AddressDetails")
        .Columns(columns =>
        {
                        columns.Template
                        (
                        @"<div id='target'><i class='fa fa-ellipsis-v' style='font-size:25px'></i></div>"
                        ).Width(30);
                        columns.Bound(p => p.AddressTypeName).Width(150).Title("Type");
            columns.Bound(p => p.AddressLine1).Width(150);
            columns.Bound(p => p.AddressLine2).Width(150);
            columns.Bound(p => p.PostalCode).Width(150);
                        columns.Bound(p => p.POBox).Width(150);
                        columns.Bound(p => p.City).Width(150);
                        columns.Bound(p => p.CountryName).Title("Country").Width(150);
            if (isLegalEntity == true)
            {
                            columns.Bound(p => p.PhoneNo).Width(150);
                            columns.Bound(p => p.FaxNo).Width(150);
            }
            else
            {
                //columns.Bound(p => p.MainCorrespondenceAddressText).Title("Main Correspondence Address");
            }
            columns.Bound(p => p.StatusName).Title(ResHelper.GetString("Eurobank.Application.General.GridHeader.RecordStatus")).Width(100).Media("(min-width: 450px)");
            

        })
        .Events(e =>
        {
            e.Edit("addConfirmButton_AddressDetails");
            e.DataBound("onAddressDataBound");
            e.Cancel("onGridCancel");
            e.Save("onSaveIndividualAddressDetails");
        })
        .ToolBar(toolbar => { if(Model.IsEdit) { toolbar.Create().Text("New").IconClass("justify-content-end").HtmlAttributes(new { style = "margin-left: auto;" }); } })

        .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName(isLegalEntity == false?"AddEditAddressDetails": "AddEditAddressDetailsLegal").DisplayDeleteConfirmation(false).Window(w=>w.Title(ResHelper.GetString("Eurobank.Application.Applicant.Address.PopUp.Title")).Width(800))).EnableCustomBinding(true)
        .Pageable()
        .Sortable()
        .Scrollable()
        .HtmlAttributes(new { style = "max-height:550px;" })
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(10)
        .Sort(x => x.Add("StatusName").Descending())
        .Model(model =>
        {

            model.Id(p => p.Id);
            model.Field(p => p.AddressType);
            model.Field(p => p.AddressTypeName);
            model.Field(p => p.AddressLine1);
            model.Field(p => p.AddressLine2);
            model.Field(p => p.PostalCode);
            model.Field(p => p.POBox);
            model.Field(p => p.City);
            model.Field(p => p.Country);
            model.Field(p => p.CountryName);
            model.Field(p => p.StatusName);
            model.Field(p => p.NumberOfStaffEmployed);

        })
        //.Model(model => model.Id(p => p.AddressGuid))
        .Events(events => events.Error("error_handlerAddressDetailsApplicant").Sync("Sync_handlerAddressDetailsApplicant"))
                    //.Events(events => events.Sync("Sync_handlerAddressDetailsApplicant"))
        .ServerOperation(true)
        .Create(update => update.Action("AddressDetailsPopup_Create", "Applicant",new { apID = Model.Id, applicationType = Model.Type}))
        .Read(read => read.Action("AddressDetails_Read", "Applicant", new { apID = Model.Id, applicationType = Model.Type }))
        .Update(update => update.Action("AddressDetailsPopup_Update", "Applicant", new { apID = Model.Id, applicationType = Model.Type }))
        .Destroy(update => update.Action("AddressDetailsPopup_Destroy", "Applicant"))
        )
		)

            </div>
        </li>
    </ul>
    @Html.Hidden("hdnApplicantEntityType", (object)ViewBag.ApplicantEntityType)
    @Html.Hidden("hdnApplication_Applicant_LeftMenu_AddressDetails", @ResHelper.GetString("Eurobank.Application.Applicant.LeftMenu.AddressDetails"))
    @Html.Hidden("hdnRedirectTo_Applicant_AddRessTypeLegalRead", @Url.Action("AddRessTypeLegalRead", "Applicant"))
    
</div>
<ul id="context-menuAddressDetails">

    @if (Model.IsEdit)
    {
        <li id="editRowAdd">Edit/View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-pencil"></span></li>
        <li id="removeRow" class="">Delete&nbsp;&nbsp;&nbsp;&nbsp;<span class="">X</span></li>
    }
    else
    {
        <li id="editRowAdd">View &nbsp;&nbsp;&nbsp;&nbsp;<span class="k-icon k-i-preview"></span></li>
    }
</ul>
<script src="~/scripts/custom/applicant/applicant_addressdetails.js"></script>